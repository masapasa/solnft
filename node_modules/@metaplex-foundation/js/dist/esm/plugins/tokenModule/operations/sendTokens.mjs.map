{"version":3,"file":"sendTokens.mjs","sources":["../../../../../src/plugins/tokenModule/operations/sendTokens.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, TransactionBuilder } from '@/utils';\nimport { createTransferInstruction } from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../pdas';\nimport { TokenProgram } from '../program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'SendTokensOperation' as const;\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const sendTokensOperation = useOperation<SendTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type SendTokensOperation = Operation<\n  typeof Key,\n  SendTokensInput,\n  SendTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type SendTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The amount of tokens to mint. */\n  amount: SplTokenAmount;\n\n  /**\n   * The owner of the destination token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  toOwner?: PublicKey;\n\n  /**\n   * The address of the destination token account.\n   *\n   * Note that this may be required as a `Signer` if the destination\n   * token account does not exist and we need to create it before\n   * sending the tokens.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `toOwner` parameters.\n   */\n  toToken?: PublicKey | Signer;\n\n  /**\n   * The owner of the source token account.\n   *\n   * This may be provided as a PublicKey if one of the following is true:\n   * - the owner of the source token account is a multisig and the\n   *   `fromMultiSigners` parameter is provided.\n   * - we are using a delegate authority to send the tokens and the\n   *   `delegateAuthority` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  fromOwner?: PublicKey | Signer; // Defaults to mx.identity().\n\n  /**\n   * The address of the source token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `fromOwner` parameters.\n   */\n  fromToken?: PublicKey;\n\n  /**\n   * The signing accounts to use if the source token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  fromMultiSigners?: KeypairSigner[];\n\n  /**\n   * The delegate authority of the source token account as a Signer.\n   *\n   * This is required when the owner of the source token account\n   * is provided as a PublicKey as someone needs to authorize\n   * that transfer of tokens.\n   *\n   * @defaultValue Defaults to not using a delegate authority.\n   */\n  delegateAuthority?: Signer;\n\n  /**\n   * The Signer paying for the new token account if it does not\n   * already exist. This is also used to pay for the transaction fee.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /** The address of the SPL Token program to override if necessary. */\n  tokenProgram?: PublicKey;\n\n  /** The address of the SPL Associated Token program to override if necessary. */\n  associatedTokenProgram?: PublicKey;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type SendTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const sendTokensOperationHandler: OperationHandler<SendTokensOperation> =\n  {\n    async handle(\n      operation: SendTokensOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<SendTokensOutput> {\n      const {\n        mintAddress,\n        toOwner = metaplex.identity().publicKey,\n        toToken,\n      } = operation.input;\n\n      const destination =\n        toToken ?? findAssociatedTokenAccountPda(mintAddress, toOwner);\n      const destinationAddress = toPublicKey(destination);\n      const destinationAccountExists = await metaplex\n        .rpc()\n        .accountExists(destinationAddress);\n      scope.throwIfCanceled();\n\n      const builder = await sendTokensBuilder(metaplex, {\n        ...operation.input,\n        toTokenExists: destinationAccountExists,\n      });\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type SendTokensBuilderParams = Omit<\n  SendTokensInput,\n  'confirmOptions'\n> & {\n  /**\n   * Whether or not the receiving token account already exists.\n   * If `false`, we'll add another instruction to create it.\n   *\n   * @defaultValue `true`\n   */\n  toTokenExists?: boolean;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that transfers the tokens. */\n  transferTokensInstructionKey?: string;\n};\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const sendTokensBuilder = async (\n  metaplex: Metaplex,\n  params: SendTokensBuilderParams\n): Promise<TransactionBuilder> => {\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    fromOwner = metaplex.identity(),\n    fromToken,\n    fromMultiSigners = [],\n    delegateAuthority,\n    payer = metaplex.identity(),\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [fromOwnerPublicKey, signers] = isSigner(fromOwner)\n    ? [fromOwner.publicKey, [fromOwner]]\n    : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];\n\n  const source =\n    fromToken ?? findAssociatedTokenAccountPda(mintAddress, fromOwnerPublicKey);\n  const destination =\n    toToken ?? findAssociatedTokenAccountPda(mintAddress, toOwner);\n\n  return (\n    TransactionBuilder.make()\n\n      // Create token account if missing.\n      .add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createTokenIfMissing({\n            ...params,\n            mint: mintAddress,\n            owner: toOwner,\n            token: toToken,\n            tokenExists: toTokenExists,\n            payer,\n            tokenVariable: 'toToken',\n          })\n      )\n\n      // Transfer tokens.\n      .add({\n        instruction: createTransferInstruction(\n          source,\n          toPublicKey(destination),\n          delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey,\n          amount.basisPoints.toNumber(),\n          fromMultiSigners,\n          tokenProgram\n        ),\n        signers,\n        key: params.transferTokensInstructionKey ?? 'transferTokens',\n      })\n  );\n};\n"],"names":["Key","sendTokensOperation","useOperation","sendTokensOperationHandler","handle","operation","metaplex","scope","mintAddress","toOwner","identity","publicKey","toToken","input","destination","findAssociatedTokenAccountPda","destinationAddress","toPublicKey","destinationAccountExists","rpc","accountExists","throwIfCanceled","builder","sendTokensBuilder","toTokenExists","sendAndConfirm","confirmOptions","params","amount","fromOwner","fromToken","fromMultiSigners","delegateAuthority","payer","tokenProgram","TokenProgram","fromOwnerPublicKey","signers","isSigner","filter","source","TransactionBuilder","make","add","tokens","builders","createTokenIfMissing","mint","owner","token","tokenExists","tokenVariable","instruction","createTransferInstruction","basisPoints","toNumber","key","transferTokensInstructionKey"],"mappings":"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"}