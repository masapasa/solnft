{"version":3,"file":"CandyMachine.mjs","sources":["../../../../../src/plugins/candyMachineModule/models/CandyMachine.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  CandyMachineData,\n  EndSettingType,\n  WhitelistMintMode,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport {\n  amount,\n  Amount,\n  BigNumber,\n  DateTime,\n  lamports,\n  SOL,\n  toBigNumber,\n  toDateTime,\n  toOptionDateTime,\n  UnparsedAccount,\n} from '@/types';\nimport { assert, Option, removeEmptyChars } from '@/utils';\nimport {\n  countCandyMachineItems,\n  getCandyMachineUuidFromAddress,\n  parseCandyMachineItems,\n} from '../helpers';\nimport {\n  CandyMachineAccount,\n  MaybeCandyMachineCollectionAccount,\n} from '../accounts';\nimport { Creator } from '@/types';\nimport { CandyMachineProgram } from '../program';\nimport { Mint } from '@/plugins/tokenModule';\n\n// -----------------\n// Model\n// -----------------\n\n/**\n * This model contains all the relevant information about a Candy Machine.\n * This includes its settings but also all of the items (a.k.a. config lines)\n * loaded inside the Candy Machine along with some statistics about the items.\n *\n * @group Models\n */\nexport type CandyMachine = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'candyMachine';\n\n  /** The address of the Candy Machine account. */\n  readonly address: PublicKey;\n\n  /** The address of program that owns the Candy Machine account. */\n  readonly programAddress: PublicKey;\n\n  /** Whether this Candy Machine was created from v1 or v2. */\n  readonly version: 1 | 2;\n\n  /** The address of the authority that is allowed to manage this Candy Machine. */\n  readonly authorityAddress: PublicKey;\n\n  /**\n   * The address of the wallet receiving the payments for minting NFTs.\n   * If the Candy Machine accepts payments in SOL, this is the SOL treasury account.\n   * Otherwise, this is the token account associated with the treasury Mint.\n   */\n  readonly walletAddress: PublicKey;\n\n  /**\n   * The address of the Mint account of the SPL Token that should be used\n   * to accept payments for minting NFTs. When `null`, it means the\n   * Candy Machine account accepts payments in SOL.\n   */\n  readonly tokenMintAddress: Option<PublicKey>;\n\n  /**\n   * The mint address of the collection NFT that should be associated with\n   * minting NFTs. When `null`, it means NFTs will not be part of a\n   * collection when minted.\n   */\n  readonly collectionMintAddress: Option<PublicKey>;\n\n  /**\n   * A 6-character long unique identifier for the Candy Machine.\n   * This usually is the first 6 characters of the address.\n   * This is more of an internal field used by the program\n   * and you typically shouldn't need it.\n   */\n  readonly uuid: string;\n\n  /**\n   * The price of minting an NFT.\n   *\n   * If the Candy Machine uses no treasury mint (i.e. the `tokenMintAddress`\n   * is `null`), this amount will be in SOL. Otherwise, its currency will\n   * match the currency of the treasury mint.\n   */\n  readonly price: Amount;\n\n  /**\n   * The symbol to use when minting NFTs (e.g. \"MYPROJECT\")\n   *\n   * This can be any string up to 10 bytes and can be made optional\n   * by providing an empty string.\n   */\n  readonly symbol: string;\n\n  /**\n   * The royalties that should be set on minted NFTs in basis points\n   * (i.e. 250 is 2.5%).\n   */\n  readonly sellerFeeBasisPoints: number;\n\n  /**\n   * Whether the minted NFTs should be mutable or not.\n   *\n   * We recommend setting this to `true` unless you have a specific reason.\n   * You can always make NFTs immutable in the future but you cannot make\n   * immutable NFTs mutable ever again.\n   */\n  readonly isMutable: boolean;\n\n  /**\n   * Wheter the minted NFTs should use the Candy Machine authority\n   * as their update authority.\n   *\n   * We strongly recommend setting this to `true` unless you have a\n   * specific reason. When set to `false`, the update authority will\n   * be given to the address that minted the NFT and you will no longer\n   * be able to update the minted NFTs in the future.\n   */\n  readonly retainAuthority: boolean;\n\n  /**\n   * The timestamp of when the Candy Machine will be live.\n   *\n   * If this is `null` or if the timestamp refers to a time in the\n   * future, no one will be able to mint NFTs from the Candy Machine\n   * (except its authority that can bypass this live date).\n   */\n  readonly goLiveDate: Option<DateTime>;\n\n  /**\n   * The maximum number of editions that can be printed from the\n   * minted NFTs.\n   *\n   * For most use cases, you'd want to set this to `0` to prevent\n   * minted NFTs to be printed multiple times.\n   *\n   * Note that you cannot set this to `null` which means unlimited editions\n   * are not supported by the Candy Machine program.\n   */\n  readonly maxEditionSupply: BigNumber;\n\n  /**\n   * The parsed items that are loaded in the Candy Machine.\n   *\n   * If the Candy Machine is using hidden settings,\n   * this will be an empty array.\n   */\n  readonly items: CandyMachineItem[];\n\n  /**\n   * The total number of items availble in the Candy Machine, minted or not.\n   */\n  readonly itemsAvailable: BigNumber;\n\n  /**\n   * The number of items that have been minted on this Candy Machine so far.\n   */\n  readonly itemsMinted: BigNumber;\n\n  /**\n   * The number of remaining items in the Candy Machine that can still be minted.\n   */\n  readonly itemsRemaining: BigNumber;\n\n  /**\n   * The number of items that have been inserted in the Candy Machine by\n   * its authority. If this number if lower than the number of items\n   * available, the Candy Machine is not ready and cannot be minted from.\n   *\n   * This field is irrelevant if the Candy Machine is using hidden settings.\n   */\n  readonly itemsLoaded: BigNumber;\n\n  /**\n   * Whether all items in the Candy Machine have been inserted by\n   * its authority.\n   *\n   * This field is irrelevant if the Candy Machine is using hidden settings.\n   */\n  readonly isFullyLoaded: boolean;\n\n  /**\n   * An optional constraint defining when the Candy Machine will end.\n   * If this is `null`, the Candy Machine will end when there are\n   * no more items to mint from (i.e. `itemsRemaining` is `0`).\n   */\n  readonly endSettings: Option<CandyMachineEndSettings>;\n\n  /** {@inheritDoc CandyMachineHiddenSettings} */\n  readonly hiddenSettings: Option<CandyMachineHiddenSettings>;\n\n  /** {@inheritDoc CandyMachineWhitelistMintSettings} */\n  readonly whitelistMintSettings: Option<CandyMachineWhitelistMintSettings>;\n\n  /** {@inheritDoc CandyMachineGatekeeper} */\n  readonly gatekeeper: Option<CandyMachineGatekeeper>;\n\n  /** {@inheritDoc Creator} */\n  readonly creators: Creator[];\n};\n\n/**\n * Represent an item inside a Candy Machine that has been or\n * will eventually be minted into an NFT.\n *\n * It only contains the name and the URI of the NFT to be as\n * the rest of the day will be shared by all NFTs and lives\n * in the Candy Machine configurations (e.g. `symbol`, `creators`, etc).\n *\n * @group Models\n */\nexport type CandyMachineItem = {\n  /** The name of the NFT to be. */\n  readonly name: string;\n\n  /**\n   * The URI of the NFT to be,\n   * pointing to some off-chain JSON Metadata.\n   */\n  readonly uri: string;\n};\n\n/**\n * End Settings provides a mechanism to stop the mint if a certain condition is\n * met without interaction.\n *\n * This type is a union type differentiated by the `endSettingType` field.\n * It can have one of the following values:\n *\n * - {@link CandyMachineEndSettingsAmount} if `endSettingType` is `EndSettingType.Amount`. \\\n *   It ends a Candy Machine after a certain amount of items have been minted.\n * - {@link CandyMachineEndSettingsDate} if `endSettingType` is `EndSettingType.Date`. \\\n *   It ends a Candy Machine after a certain date.\n *\n * @group Models\n */\nexport type CandyMachineEndSettings =\n  | CandyMachineEndSettingsAmount\n  | CandyMachineEndSettingsDate;\n\n/**\n * The \"Amount\" end setting allows us to end a Candy Machine\n * after a certain amount of items have been minted.\n *\n * @group Models\n */\nexport type CandyMachineEndSettingsAmount = {\n  /** Differentiates the types of end settings. */\n  readonly endSettingType: EndSettingType.Amount;\n\n  /** The maximum number of items to mint. */\n  readonly number: BigNumber;\n};\n\n/**\n * The \"Date\" end setting allows us to end a Candy Machine\n * after a given date and time.\n *\n * @group Models\n */\nexport type CandyMachineEndSettingsDate = {\n  /** Differentiates the types of end settings. */\n  readonly endSettingType: EndSettingType.Date;\n\n  /** The date after which the Candy Machine is closed. */\n  readonly date: DateTime;\n};\n\n/**\n * An optional setting that makes items in the Candy Machine hidden by\n * providing a single URI for all minted NFTs and the hash of a file that\n * maps mint number to actual NFT URIs.\n *\n * Hidden settings serve two purposes.\n * - First, it allows the creation of larger drops (20k+), since\n *   the JSON metadata URIs are not stored on-chain for each item.\n * - In turn, this also allows the creation of hide-and-reveal drops,\n *   where users discover which items they minted after the mint is complete.\n *\n * Once hidden settings are enabled, every minted NFT will have the same URI and the\n * name will be created by appending the mint number (e.g., “#45”) to the specified\n * name. The hash is expected to be a 32 character string corresponding to\n * the hash of a cache file that has the mapping between a mint number and the\n * actual metadata URI. This allows the order of the mint to be verified by\n * others after the mint is complete.\n *\n * Since the metadata URIs are not on-chain, it is possible to create very large\n * drops. The only caveat is that there is a need for an off-chain process to\n * update the metadata for each item. This is important otherwise all items\n * will have the same metadata.\n *\n * @group Models\n */\nexport type CandyMachineHiddenSettings = {\n  /**\n   * The base name for all minted NFTs.\n   * The number of the mint will be appended to this name.\n   */\n  readonly name: string;\n\n  /**\n   * The URI shared by all minted NFTs.\n   */\n  readonly uri: string;\n\n  /**\n   * A 32-character hash. In most cases this is the hash of the\n   * cache file with the mapping between mint numbers and metadata URIs\n   * so that the order can be verified when the mint is complete.\n   */\n  readonly hash: number[];\n};\n\n/**\n * Whitelist settings provide a variety of different use cases and revolve\n * around the idea of using custom SPL tokens to offer special rights to token\n * holders. How these SPL tokens are distributed is up to you.\n *\n * For example, you can offer a discount to token holders, you can allow token\n * holders to mint NFTs before everyone else, or a combination of both.\n *\n * @group Models\n */\nexport type CandyMachineWhitelistMintSettings = {\n  /**\n   * Determines how the whitelist token is used.\n   * - `WhitelistMintMode.BurnEveryTime`: a whitelist token is burned every time an NFT is mint.\n   * - `WhitelistMintMode.NeverBurn`: whitelist tokens are kept after minting.\n   */\n  readonly mode: WhitelistMintMode;\n\n  /** The mint address of the whitelist token. */\n  readonly mint: PublicKey;\n\n  /** Indicates whether whitelist token holders can mint before the live date. */\n  readonly presale: boolean;\n\n  /**\n   * The updated price for whitelist token holders.\n   * When provided, this `discountPrice` will be used instead of the original `price`\n   * for whitelist token holders only. When `null`, everybody will pay the original `price`.\n   */\n  readonly discountPrice: Option<Amount>;\n};\n\n/**\n * Gatekeeper settings allow us to protect ourselves against malicious actors such as bots.\n * Whilst the Candy Machine program itself has some protection mechanisms against bots,\n * you may want to add extra protection to ensure only humand can mint from your project.\n *\n * To enable gatekeeper settings, you must provide the address of a Gatekeeper Network\n * which usually encapsulates multiple gatekeeper providers and is responsible for\n * validating the legitimacy of the minting actor.\n *\n * @group Models\n */\nexport type CandyMachineGatekeeper = {\n  /** The address of your desired Gatekeeper Network. */\n  readonly network: PublicKey;\n\n  /** Whether or not a new challenge should be required after each use. */\n  readonly expireOnUse: boolean;\n};\n\n// -----------------\n// Program to Model\n// -----------------\n\n/** @group Model Helpers */\nexport const isCandyMachine = (value: any): value is CandyMachine =>\n  typeof value === 'object' && value.model === 'candyMachine';\n\n/** @group Model Helpers */\nexport function assertCandyMachine(value: any): asserts value is CandyMachine {\n  assert(isCandyMachine(value), 'Expected CandyMachine type');\n}\n\n/** @group Model Helpers */\nexport const toCandyMachine = (\n  account: CandyMachineAccount,\n  unparsedAccount: UnparsedAccount,\n  collectionAccount: MaybeCandyMachineCollectionAccount | null,\n  mint: Mint | null\n): CandyMachine => {\n  assert(\n    mint === null ||\n      (account.data.tokenMint !== null &&\n        mint.address.equals(account.data.tokenMint))\n  );\n\n  const itemsAvailable = toBigNumber(account.data.data.itemsAvailable);\n  const itemsMinted = toBigNumber(account.data.itemsRedeemed);\n\n  const endSettings = account.data.data.endSettings;\n  const hiddenSettings = account.data.data.hiddenSettings;\n  const whitelistMintSettings = account.data.data.whitelistMintSettings;\n  const gatekeeper = account.data.data.gatekeeper;\n\n  const rawData = unparsedAccount.data;\n  const itemsLoaded = hiddenSettings\n    ? toBigNumber(0)\n    : countCandyMachineItems(rawData);\n  const items = hiddenSettings ? [] : parseCandyMachineItems(rawData);\n\n  return {\n    model: 'candyMachine',\n    address: account.publicKey,\n    programAddress: account.owner,\n    version: account.owner.equals(CandyMachineProgram.publicKey) ? 2 : 1,\n    authorityAddress: account.data.authority,\n    walletAddress: account.data.wallet,\n    tokenMintAddress: account.data.tokenMint,\n    collectionMintAddress:\n      collectionAccount && collectionAccount.exists\n        ? collectionAccount.data.mint\n        : null,\n    uuid: account.data.data.uuid,\n    price: amount(account.data.data.price, mint ? mint.currency : SOL),\n    symbol: removeEmptyChars(account.data.data.symbol),\n    sellerFeeBasisPoints: account.data.data.sellerFeeBasisPoints,\n    isMutable: account.data.data.isMutable,\n    retainAuthority: account.data.data.retainAuthority,\n    goLiveDate: toOptionDateTime(account.data.data.goLiveDate),\n    maxEditionSupply: toBigNumber(account.data.data.maxSupply),\n    items,\n    itemsAvailable,\n    itemsMinted,\n    itemsRemaining: toBigNumber(itemsAvailable.sub(itemsMinted)),\n    itemsLoaded,\n    isFullyLoaded: itemsAvailable.lte(itemsLoaded),\n    endSettings: endSettings\n      ? endSettings.endSettingType === EndSettingType.Date\n        ? {\n            endSettingType: EndSettingType.Date,\n            date: toDateTime(endSettings.number),\n          }\n        : {\n            endSettingType: EndSettingType.Amount,\n            number: toBigNumber(endSettings.number),\n          }\n      : null,\n    hiddenSettings,\n    whitelistMintSettings: whitelistMintSettings\n      ? {\n          ...whitelistMintSettings,\n          discountPrice: whitelistMintSettings.discountPrice\n            ? lamports(whitelistMintSettings.discountPrice)\n            : null,\n        }\n      : null,\n    gatekeeper: gatekeeper\n      ? {\n          ...gatekeeper,\n          network: gatekeeper.gatekeeperNetwork,\n        }\n      : null,\n    creators: account.data.data.creators,\n  };\n};\n\n// -----------------\n// Model to Configs\n// -----------------\n\n/**\n * This object provides a common interface for the configurations required\n * to create or update Candy Machines.\n *\n * @group Models\n */\nexport type CandyMachineConfigs = {\n  /**\n   * The address of the wallet receiving the payments for minting NFTs.\n   * If the Candy Machine accepts payments in SOL, this is the SOL treasury account.\n   * Otherwise, this is the token account associated with the treasury Mint.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  wallet: PublicKey;\n\n  /**\n   * The address of the Mint account of the SPL Token that should be used\n   * to accept payments for minting NFTs. When `null`, it means the\n   * Candy Machine account accepts payments in SOL.\n   */\n  tokenMint: Option<PublicKey>;\n\n  /**\n   * The price of minting an NFT.\n   *\n   * If the Candy Machine uses no treasury mint (i.e. the `tokenMintAddress`\n   * is `null`), this amount will be in SOL. Otherwise, its currency will\n   * match the currency of the treasury mint.\n   *\n   * @example\n   * ```ts\n   * { price: sol(1.5) } // For 1.5 SOL.\n   * { price: token(320, 2, MYTOKEN) } // For 3.2 MYTOKEN which is a 2-decimal token.\n   * ```\n   */\n  price: Amount;\n\n  /**\n   * The royalties that should be set on minted NFTs in basis points\n   *\n   * @example\n   * ```ts\n   * { sellerFeeBasisPoints: 250 } // For 2.5% royalties.\n   * ```\n   */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * The total number of items availble in the Candy Machine, minted or not.\n   *\n   * @example\n   * ```ts\n   * { itemsAvailable: toBigNumber(1000) } // For 1000 items.\n   * ```\n   */\n  itemsAvailable: BigNumber;\n\n  /**\n   * The symbol to use when minting NFTs (e.g. \"MYPROJECT\")\n   *\n   * This can be any string up to 10 bytes and can be made optional\n   * by providing an empty string.\n   *\n   * @defaultValue `\"\"`\n   */\n  symbol: string;\n\n  /**\n   * The maximum number of editions that can be printed from the\n   * minted NFTs.\n   *\n   * For most use cases, you'd want to set this to `0` to prevent\n   * minted NFTs to be printed multiple times.\n   *\n   * Note that you cannot set this to `null` which means unlimited editions\n   * are not supported by the Candy Machine program.\n   *\n   * @defaultValue `toBigNumber(0)`\n   */\n  maxEditionSupply: BigNumber;\n\n  /**\n   * Whether the minted NFTs should be mutable or not.\n   *\n   * We recommend setting this to `true` unless you have a specific reason.\n   * You can always make NFTs immutable in the future but you cannot make\n   * immutable NFTs mutable ever again.\n   *\n   * @defaultValue `true`\n   */\n  isMutable: boolean;\n\n  /**\n   * Wheter the minted NFTs should use the Candy Machine authority\n   * as their update authority.\n   *\n   * We strongly recommend setting this to `true` unless you have a\n   * specific reason. When set to `false`, the update authority will\n   * be given to the address that minted the NFT and you will no longer\n   * be able to update the minted NFTs in the future.\n   *\n   * @defaultValue `true`\n   */\n  retainAuthority: boolean;\n\n  /**\n   * The timestamp of when the Candy Machine will be live.\n   *\n   * If this is `null` or if the timestamp refers to a time in the\n   * future, no one will be able to mint NFTs from the Candy Machine\n   * (except its authority that can bypass this live date).\n   *\n   * @defaultValue `null`\n   */\n  goLiveDate: Option<DateTime>;\n\n  /**\n   * An optional constraint defining when the Candy Machine will end.\n   * If this is `null`, the Candy Machine will end when there are\n   * no more items to mint from (i.e. `itemsRemaining` is `0`).\n   *\n   * @defaultValue `null`\n   */\n  endSettings: Option<CandyMachineEndSettings>;\n\n  /**\n   * {@inheritDoc CandyMachineHiddenSettings}\n   * @defaultValue `null`\n   */\n  hiddenSettings: Option<CandyMachineHiddenSettings>;\n\n  /**\n   * {@inheritDoc CandyMachineWhitelistMintSettings}\n   * @defaultValue `null`\n   */\n  whitelistMintSettings: Option<CandyMachineWhitelistMintSettings>;\n\n  /**\n   * {@inheritDoc CandyMachineGatekeeper}\n   * @defaultValue `null`\n   */\n  gatekeeper: Option<CandyMachineGatekeeper>;\n\n  /**\n   * {@inheritDoc Creator}\n   * @defaultValue\n   * ```ts\n   * [{\n   *   address: metaplex.identity().publicKey,\n   *   share: 100,\n   *   verified: false,\n   * }]\n   * ```\n   */\n  creators: Creator[];\n};\n\n/** @group Model Helpers */\nexport const toCandyMachineConfigs = (\n  candyMachine: CandyMachine\n): CandyMachineConfigs => {\n  return {\n    wallet: candyMachine.walletAddress,\n    tokenMint: candyMachine.tokenMintAddress,\n    ...candyMachine,\n  };\n};\n\n// -----------------\n// Configs to Program\n// -----------------\n\n/** @group Models */\nexport type CandyMachineInstructionData = {\n  wallet: PublicKey;\n  tokenMint: Option<PublicKey>;\n  data: CandyMachineData;\n};\n\n/** @group Model Helpers */\nexport const toCandyMachineInstructionData = (\n  address: PublicKey,\n  configs: CandyMachineConfigs\n): CandyMachineInstructionData => {\n  const endSettings = configs.endSettings;\n  const whitelistMintSettings = configs.whitelistMintSettings;\n  const gatekeeper = configs.gatekeeper;\n\n  return {\n    wallet: configs.wallet,\n    tokenMint: configs.tokenMint,\n    data: {\n      ...configs,\n      uuid: getCandyMachineUuidFromAddress(address),\n      price: configs.price.basisPoints,\n      maxSupply: configs.maxEditionSupply,\n      endSettings: endSettings\n        ? {\n            ...endSettings,\n            number:\n              endSettings.endSettingType === EndSettingType.Date\n                ? endSettings.date\n                : endSettings.number,\n          }\n        : null,\n      whitelistMintSettings: whitelistMintSettings\n        ? {\n            ...whitelistMintSettings,\n            discountPrice:\n              whitelistMintSettings.discountPrice?.basisPoints ?? null,\n          }\n        : null,\n      gatekeeper: gatekeeper\n        ? {\n            ...gatekeeper,\n            gatekeeperNetwork: gatekeeper.network,\n          }\n        : null,\n    },\n  };\n};\n"],"names":["isCandyMachine","value","model","assertCandyMachine","assert","toCandyMachine","account","unparsedAccount","collectionAccount","mint","data","tokenMint","address","equals","itemsAvailable","toBigNumber","itemsMinted","itemsRedeemed","endSettings","hiddenSettings","whitelistMintSettings","gatekeeper","rawData","itemsLoaded","countCandyMachineItems","items","parseCandyMachineItems","publicKey","programAddress","owner","version","CandyMachineProgram","authorityAddress","authority","walletAddress","wallet","tokenMintAddress","collectionMintAddress","exists","uuid","price","amount","currency","SOL","symbol","removeEmptyChars","sellerFeeBasisPoints","isMutable","retainAuthority","goLiveDate","toOptionDateTime","maxEditionSupply","maxSupply","itemsRemaining","sub","isFullyLoaded","lte","endSettingType","EndSettingType","Date","date","toDateTime","number","Amount","discountPrice","lamports","network","gatekeeperNetwork","creators","toCandyMachineConfigs","candyMachine","toCandyMachineInstructionData","configs","getCandyMachineUuidFromAddress","basisPoints"],"mappings":"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"}