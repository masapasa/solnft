{"version":3,"file":"loadMetadata.mjs","sources":["../../../../../src/plugins/nftModule/operations/loadMetadata.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport { Metadata, Nft, NftWithToken, Sft, SftWithToken } from '../models';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadMetadataOperation' as const;\n\n/**\n * Transforms a `Metadata` model into a `Nft` or `Sft` model.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .load({ metadata })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const loadMetadataOperation = useOperation<LoadMetadataOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type LoadMetadataOperation = Operation<\n  typeof Key,\n  LoadMetadataInput,\n  LoadMetadataOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type LoadMetadataInput = {\n  /** The address of the metadata account. */\n  metadata: Metadata;\n\n  /**\n   * The explicit token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that address is valid, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenOwner` parameter to fetch the\n   * associated token account.\n   *\n   * @defaultValue Defaults to not fetching the token account.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The associated token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that account exists, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenAddress` parameter to fetch the\n   * token account at an explicit address.\n   *\n   * @defaultValue Defaults to not fetching the associated token account.\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n\n  /** The level of commitment desired when querying the blockchain. */\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type LoadMetadataOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const loadMetadataOperationHandler: OperationHandler<LoadMetadataOperation> =\n  {\n    handle: async (\n      operation: LoadMetadataOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<LoadMetadataOutput> => {\n      const { metadata, loadJsonMetadata = true } = operation.input;\n\n      let nftOrSft = await metaplex\n        .nfts()\n        .findByMint({\n          ...operation.input,\n          mintAddress: metadata.mintAddress,\n          loadJsonMetadata: !metadata.jsonLoaded && loadJsonMetadata,\n        })\n        .run(scope);\n\n      if (!nftOrSft.jsonLoaded && metadata.jsonLoaded) {\n        nftOrSft = { ...nftOrSft, json: metadata.json, jsonLoaded: true };\n      }\n\n      return nftOrSft;\n    },\n  };\n"],"names":["Key","loadMetadataOperation","useOperation","loadMetadataOperationHandler","handle","operation","metaplex","scope","metadata","loadJsonMetadata","input","nftOrSft","nfts","findByMint","mintAddress","jsonLoaded","run","json"],"mappings":";;AAMA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,uBAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qBAAqB,GAAGC,YAAY,CAAwBF,GAAxB,EAA1C;AAEP;AACA;AACA;AACA;;AA0DA;AACA;AACA;AACA;AACO,MAAMG,4BAAqE,GAChF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0B;IAChC,MAAM;MAAEC,QAAF;AAAYC,MAAAA,gBAAgB,GAAG,IAAA;KAASJ,GAAAA,SAAS,CAACK,KAAxD,CAAA;AAEA,IAAA,IAAIC,QAAQ,GAAG,MAAML,QAAQ,CAC1BM,IADkB,EAElBC,CAAAA,UAFkB,CAEP,EACV,GAAGR,SAAS,CAACK,KADH;MAEVI,WAAW,EAAEN,QAAQ,CAACM,WAFZ;AAGVL,MAAAA,gBAAgB,EAAE,CAACD,QAAQ,CAACO,UAAV,IAAwBN,gBAAAA;AAHhC,KAFO,CAOlBO,CAAAA,GAPkB,CAOdT,KAPc,CAArB,CAAA;;IASA,IAAI,CAACI,QAAQ,CAACI,UAAV,IAAwBP,QAAQ,CAACO,UAArC,EAAiD;MAC/CJ,QAAQ,GAAG,EAAE,GAAGA,QAAL;QAAeM,IAAI,EAAET,QAAQ,CAACS,IAA9B;AAAoCF,QAAAA,UAAU,EAAE,IAAA;OAA3D,CAAA;AACD,KAAA;;AAED,IAAA,OAAOJ,QAAP,CAAA;AACD,GAAA;AAtBH;;;;"}