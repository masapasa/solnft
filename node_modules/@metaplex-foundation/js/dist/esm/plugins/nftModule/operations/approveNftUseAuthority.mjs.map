{"version":3,"file":"approveNftUseAuthority.mjs","sources":["../../../../../src/plugins/nftModule/operations/approveNftUseAuthority.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createApproveUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda, TokenProgram } from '../../tokenModule';\nimport {\n  findMetadataPda,\n  findProgramAsBurnerPda,\n  findUseAuthorityRecordPda,\n} from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftUseAuthorityOperation' as const;\n\n/**\n * Approves a new use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .approveUseAuthority({ mintAddress, user })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveNftUseAuthorityOperation =\n  useOperation<ApproveNftUseAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveNftUseAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftUseAuthorityInput,\n  ApproveNftUseAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ApproveNftUseAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the use authority to approve. */\n  user: PublicKey;\n\n  /**\n   * The owner of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAddress?: PublicKey;\n\n  /**\n   * The Signer paying for the creation of the PDA account\n   * that keeps track of the new use authority.\n   * This account will also pay for the transaction fee.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /**\n   * The number of usages this new use authority\n   * is allowed to perform.\n   *\n   * @defaultValue `1`\n   */\n  numberOfUses?: number;\n\n  /** The address of the SPL Token program to override if necessary. */\n  tokenProgram?: PublicKey;\n\n  /** The address of the SPL System program to override if necessary. */\n  systemProgram?: PublicKey;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveNftUseAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveNftUseAuthorityOperationHandler: OperationHandler<ApproveNftUseAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftUseAuthorityOperation,\n      metaplex: Metaplex\n    ): Promise<ApproveNftUseAuthorityOutput> => {\n      return approveNftUseAuthorityBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveNftUseAuthorityBuilderParams = Omit<\n  ApproveNftUseAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that approves the use authority. */\n  instructionKey?: string;\n};\n\n/**\n * Approves a new use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .approveUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveNftUseAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftUseAuthorityBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    user,\n    owner = metaplex.identity(),\n    payer = metaplex.identity(),\n  } = params;\n  const metadata = findMetadataPda(mintAddress);\n  const useAuthorityRecord = findUseAuthorityRecordPda(mintAddress, user);\n  const programAsBurner = findProgramAsBurnerPda();\n  const ownerTokenAddress =\n    params.ownerTokenAddress ??\n    findAssociatedTokenAccountPda(mintAddress, owner.publicKey);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the use authority.\n      .add({\n        instruction: createApproveUseAuthorityInstruction(\n          {\n            useAuthorityRecord,\n            owner: owner.publicKey,\n            payer: payer.publicKey,\n            user,\n            ownerTokenAccount: ownerTokenAddress,\n            metadata,\n            mint: mintAddress,\n            burner: programAsBurner,\n            tokenProgram: params.tokenProgram ?? TokenProgram.publicKey,\n            systemProgram: params.systemProgram ?? SystemProgram.programId,\n          },\n          {\n            approveUseAuthorityArgs: {\n              numberOfUses: params.numberOfUses ?? 1,\n            },\n          }\n        ),\n        signers: [owner, payer],\n        key: params.instructionKey ?? 'approveUseAuthority',\n      })\n  );\n};\n"],"names":["Key","approveNftUseAuthorityOperation","useOperation","approveNftUseAuthorityOperationHandler","handle","operation","metaplex","approveNftUseAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","user","owner","identity","payer","metadata","findMetadataPda","useAuthorityRecord","findUseAuthorityRecordPda","programAsBurner","findProgramAsBurnerPda","ownerTokenAddress","findAssociatedTokenAccountPda","publicKey","TransactionBuilder","make","setFeePayer","add","instruction","createApproveUseAuthorityInstruction","ownerTokenAccount","mint","burner","tokenProgram","TokenProgram","systemProgram","SystemProgram","programId","approveUseAuthorityArgs","numberOfUses","signers","key","instructionKey"],"mappings":"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"}