{"version":3,"file":"migrateToSizedCollectionNft.mjs","sources":["../../../../../src/plugins/nftModule/operations/migrateToSizedCollectionNft.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createSetCollectionSizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findCollectionAuthorityRecordPda, findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MigrateToSizedCollectionNftOperation' as const;\n\n/**\n * Migrates a legacy Collection NFT to a sized Collection NFT.\n * Both can act as a Collection for NFTs but only the latter\n * keeps track of the size of the collection on chain.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .migrateToSizedCollection({ mintAddress, size: toBigNumber(10000) })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const migrateToSizedCollectionNftOperation =\n  useOperation<MigrateToSizedCollectionNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MigrateToSizedCollectionNftOperation = Operation<\n  typeof Key,\n  MigrateToSizedCollectionNftInput,\n  MigrateToSizedCollectionNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MigrateToSizedCollectionNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * An authority that can update the Collection NFT at the\n   * given mint address. This can either be the update authority\n   * for that Collection NFT or an approved delegate authority.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  collectionAuthority?: Signer;\n\n  /**\n   * The current size of all **verified** NFTs and/or SFTs within\n   * the Collection.\n   *\n   * **Warning, once set, this size can no longer be updated.**\n   */\n  size: BigNumber;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  isDelegated?: boolean;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MigrateToSizedCollectionNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const migrateToSizedCollectionNftOperationHandler: OperationHandler<MigrateToSizedCollectionNftOperation> =\n  {\n    handle: async (\n      operation: MigrateToSizedCollectionNftOperation,\n      metaplex: Metaplex\n    ): Promise<MigrateToSizedCollectionNftOutput> => {\n      return migrateToSizedCollectionNftBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MigrateToSizedCollectionNftBuilderParams = Omit<\n  MigrateToSizedCollectionNftInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that sets the collection size. */\n  instructionKey?: string;\n};\n\n/**\n * Migrates a legacy Collection NFT to a sized Collection NFT.\n * Both can act as a Collection for NFTs but only the latter\n * keeps track of the size of the collection on chain.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .migrateToSizedCollection({ mintAddress, size: toBigNumber(10000) });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const migrateToSizedCollectionNftBuilder = (\n  metaplex: Metaplex,\n  params: MigrateToSizedCollectionNftBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    collectionAuthority = metaplex.identity(),\n    size,\n    isDelegated = false,\n  } = params;\n\n  return (\n    TransactionBuilder.make()\n\n      // Update the metadata account.\n      .add({\n        instruction: createSetCollectionSizeInstruction(\n          {\n            collectionMetadata: findMetadataPda(mintAddress),\n            collectionAuthority: collectionAuthority.publicKey,\n            collectionMint: mintAddress,\n            collectionAuthorityRecord: isDelegated\n              ? findCollectionAuthorityRecordPda(\n                  mintAddress,\n                  collectionAuthority.publicKey\n                )\n              : undefined,\n          },\n          { setCollectionSizeArgs: { size } }\n        ),\n        signers: [collectionAuthority],\n        key: params.instructionKey ?? 'setCollectionSize',\n      })\n  );\n};\n"],"names":["Key","migrateToSizedCollectionNftOperation","useOperation","migrateToSizedCollectionNftOperationHandler","handle","operation","metaplex","migrateToSizedCollectionNftBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","collectionAuthority","identity","size","isDelegated","TransactionBuilder","make","add","instruction","createSetCollectionSizeInstruction","collectionMetadata","findMetadataPda","publicKey","collectionMint","collectionAuthorityRecord","findCollectionAuthorityRecordPda","undefined","setCollectionSizeArgs","signers","key","instructionKey"],"mappings":";;;;;AAeA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oCAAoC,GAC/CC,YAAY,CAAuCF,GAAvC,EADP;AAGP;AACA;AACA;AACA;;AAsDA;AACA;AACA;AACA;AACO,MAAMG,2CAAmG,GAC9G;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGyC;AAC/C,IAAA,OAAOC,kCAAkC,CACvCD,QADuC,EAEvCD,SAAS,CAACG,KAF6B,CAAlC,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaH,kCAAkC,GAAG,CAChDD,QADgD,EAEhDK,MAFgD,KAGzB;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;AAEJC,IAAAA,mBAAmB,GAAGP,QAAQ,CAACQ,QAAT,EAFlB;IAGJC,IAHI;AAIJC,IAAAA,WAAW,GAAG,KAAA;AAJV,GAAA,GAKFL,MALJ,CAAA;EAOA,OACEM,kBAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHC,WAAW,EAAEC,kCAAkC,CAC7C;AACEC,MAAAA,kBAAkB,EAAEC,eAAe,CAACX,WAAD,CADrC;MAEEC,mBAAmB,EAAEA,mBAAmB,CAACW,SAF3C;AAGEC,MAAAA,cAAc,EAAEb,WAHlB;MAIEc,yBAAyB,EAAEV,WAAW,GAClCW,gCAAgC,CAC9Bf,WAD8B,EAE9BC,mBAAmB,CAACW,SAFU,CADE,GAKlCI,SAAAA;AATN,KAD6C,EAY7C;AAAEC,MAAAA,qBAAqB,EAAE;AAAEd,QAAAA,IAAAA;AAAF,OAAA;AAAzB,KAZ6C,CAD5C;IAeHe,OAAO,EAAE,CAACjB,mBAAD,CAfN;AAgBHkB,IAAAA,GAAG,EAAEpB,CAAAA,qBAAAA,GAAAA,MAAM,CAACqB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,mBAAA;AAhB3B,GAHP,CADF,CAAA;AAuBD;;;;"}