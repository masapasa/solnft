{"version":3,"file":"unverifyNftCreator.mjs","sources":["../../../../../src/plugins/nftModule/operations/unverifyNftCreator.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createRemoveCreatorVerificationInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findMetadataPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UnverifyNftCreatorOperation' as const;\n\n/**\n * Unverifies the creator of an NFT or SFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .unverifyCreator({ mintAddress, creator })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const unverifyNftCreatorOperation =\n  useOperation<UnverifyNftCreatorOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UnverifyNftCreatorOperation = Operation<\n  typeof Key,\n  UnverifyNftCreatorInput,\n  UnverifyNftCreatorOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UnverifyNftCreatorInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The creator of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  creator?: Signer;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UnverifyNftCreatorOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const unverifyNftCreatorOperationHandler: OperationHandler<UnverifyNftCreatorOperation> =\n  {\n    handle: async (\n      operation: UnverifyNftCreatorOperation,\n      metaplex: Metaplex\n    ): Promise<UnverifyNftCreatorOutput> => {\n      return unverifyNftCreatorBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UnverifyNftCreatorBuilderParams = Omit<\n  UnverifyNftCreatorInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that unverifies the creator. */\n  instructionKey?: string;\n};\n\n/**\n * Unverifies the creator of an NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .unverifyCreator({ mintAddress, creator });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const unverifyNftCreatorBuilder = (\n  metaplex: Metaplex,\n  params: UnverifyNftCreatorBuilderParams\n): TransactionBuilder => {\n  const { mintAddress, creator = metaplex.identity() } = params;\n\n  return (\n    TransactionBuilder.make()\n\n      // Verify the creator.\n      .add({\n        instruction: createRemoveCreatorVerificationInstruction({\n          metadata: findMetadataPda(mintAddress),\n          creator: creator.publicKey,\n        }),\n        signers: [creator],\n        key: params.instructionKey ?? 'unverifyCreator',\n      })\n  );\n};\n"],"names":["Key","unverifyNftCreatorOperation","useOperation","unverifyNftCreatorOperationHandler","handle","operation","metaplex","unverifyNftCreatorBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","creator","identity","TransactionBuilder","make","add","instruction","createRemoveCreatorVerificationInstruction","metadata","findMetadataPda","publicKey","signers","key","instructionKey"],"mappings":";;;;;AASA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,2BAA2B,GACtCC,YAAY,CAA8BF,GAA9B,EADP;AAGP;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;AACO,MAAMG,kCAAiF,GAC5F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGgC;AACtC,IAAA,OAAOC,yBAAyB,CAC9BD,QAD8B,EAE9BD,SAAS,CAACG,KAFoB,CAAzB,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaH,yBAAyB,GAAG,CACvCD,QADuC,EAEvCK,MAFuC,KAGhB;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IAAEC,WAAF;IAAeC,OAAO,GAAGP,QAAQ,CAACQ,QAAT,EAAA;AAAzB,GAAA,GAAiDH,MAAvD,CAAA;EAEA,OACEI,kBAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHC,WAAW,EAAEC,0CAA0C,CAAC;AACtDC,MAAAA,QAAQ,EAAEC,eAAe,CAACT,WAAD,CAD6B;MAEtDC,OAAO,EAAEA,OAAO,CAACS,SAAAA;AAFqC,KAAD,CADpD;IAKHC,OAAO,EAAE,CAACV,OAAD,CALN;AAMHW,IAAAA,GAAG,EAAEb,CAAAA,qBAAAA,GAAAA,MAAM,CAACc,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,iBAAA;AAN3B,GAHP,CADF,CAAA;AAaD;;;;"}