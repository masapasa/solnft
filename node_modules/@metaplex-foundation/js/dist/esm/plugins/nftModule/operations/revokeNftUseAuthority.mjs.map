{"version":3,"file":"revokeNftUseAuthority.mjs","sources":["../../../../../src/plugins/nftModule/operations/revokeNftUseAuthority.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createRevokeUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey, SystemProgram } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda, TokenProgram } from '../../tokenModule';\nimport { findMetadataPda, findUseAuthorityRecordPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftUseAuthorityOperation' as const;\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeUseAuthority({ mintAddress, user })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftUseAuthorityOperation =\n  useOperation<RevokeNftUseAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftUseAuthorityOperation = Operation<\n  typeof Key,\n  RevokeNftUseAuthorityInput,\n  RevokeNftUseAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftUseAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the use authority to revoke. */\n  user: PublicKey;\n\n  /**\n   * The owner of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAddress?: PublicKey;\n\n  /** The address of the SPL Token program to override if necessary. */\n  tokenProgram?: PublicKey;\n\n  /** The address of the SPL System program to override if necessary. */\n  systemProgram?: PublicKey;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftUseAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftUseAuthorityOperationHandler: OperationHandler<RevokeNftUseAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeNftUseAuthorityOperation,\n      metaplex: Metaplex\n    ): Promise<RevokeNftUseAuthorityOutput> => {\n      return revokeNftUseAuthorityBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftUseAuthorityBuilderParams = Omit<\n  RevokeNftUseAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the use authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftUseAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftUseAuthorityBuilderParams\n): TransactionBuilder => {\n  const { mintAddress, user, owner = metaplex.identity() } = params;\n  const metadata = findMetadataPda(mintAddress);\n  const useAuthorityRecord = findUseAuthorityRecordPda(mintAddress, user);\n  const ownerTokenAddress =\n    params.ownerTokenAddress ??\n    findAssociatedTokenAccountPda(mintAddress, owner.publicKey);\n\n  return (\n    TransactionBuilder.make()\n\n      // Revoke the use authority.\n      .add({\n        instruction: createRevokeUseAuthorityInstruction({\n          useAuthorityRecord,\n          owner: owner.publicKey,\n          user,\n          ownerTokenAccount: ownerTokenAddress,\n          mint: mintAddress,\n          metadata,\n          tokenProgram: params.tokenProgram ?? TokenProgram.publicKey,\n          systemProgram: params.systemProgram ?? SystemProgram.programId,\n        }),\n        signers: [owner],\n        key: params.instructionKey ?? 'revokeUseAuthority',\n      })\n  );\n};\n"],"names":["Key","revokeNftUseAuthorityOperation","useOperation","revokeNftUseAuthorityOperationHandler","handle","operation","metaplex","revokeNftUseAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","user","owner","identity","metadata","findMetadataPda","useAuthorityRecord","findUseAuthorityRecordPda","ownerTokenAddress","findAssociatedTokenAccountPda","publicKey","TransactionBuilder","make","add","instruction","createRevokeUseAuthorityInstruction","ownerTokenAccount","mint","tokenProgram","TokenProgram","systemProgram","SystemProgram","programId","signers","key","instructionKey"],"mappings":";;;;;;;;AAUA;AACA;;AAEA,MAAMA,GAAG,GAAG,gCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,8BAA8B,GACzCC,YAAY,CAAiCF,GAAjC,EADP;AAGP;AACA;AACA;AACA;;AAqDA;AACA;AACA;AACA;AACO,MAAMG,qCAAuF,GAClG;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAGmC;AACzC,IAAA,OAAOC,4BAA4B,CACjCD,QADiC,EAEjCD,SAAS,CAACG,KAFuB,CAA5B,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaH,4BAA4B,GAAG,CAC1CD,QAD0C,EAE1CK,MAF0C,KAGnB;AAAA,EAAA,IAAA,qBAAA,EAAA,oBAAA,EAAA,qBAAA,EAAA,qBAAA,CAAA;;EACvB,MAAM;IAAEC,WAAF;IAAeC,IAAf;IAAqBC,KAAK,GAAGR,QAAQ,CAACS,QAAT,EAAA;AAA7B,GAAA,GAAqDJ,MAA3D,CAAA;AACA,EAAA,MAAMK,QAAQ,GAAGC,eAAe,CAACL,WAAD,CAAhC,CAAA;AACA,EAAA,MAAMM,kBAAkB,GAAGC,yBAAyB,CAACP,WAAD,EAAcC,IAAd,CAApD,CAAA;AACA,EAAA,MAAMO,iBAAiB,GAAA,CAAA,qBAAA,GACrBT,MAAM,CAACS,iBADc,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAErBC,6BAA6B,CAACT,WAAD,EAAcE,KAAK,CAACQ,SAApB,CAF/B,CAAA;EAIA,OACEC,kBAAkB,CAACC,IAAnB,EAEE;AAFF,GAGGC,GAHH,CAGO;IACHC,WAAW,EAAEC,mCAAmC,CAAC;MAC/CT,kBAD+C;MAE/CJ,KAAK,EAAEA,KAAK,CAACQ,SAFkC;MAG/CT,IAH+C;AAI/Ce,MAAAA,iBAAiB,EAAER,iBAJ4B;AAK/CS,MAAAA,IAAI,EAAEjB,WALyC;MAM/CI,QAN+C;AAO/Cc,MAAAA,YAAY,0BAAEnB,MAAM,CAACmB,YAAT,MAAyBC,IAAAA,IAAAA,oBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,oBAAAA,GAAAA,YAAY,CAACT,SAPH;AAQ/CU,MAAAA,aAAa,2BAAErB,MAAM,CAACqB,aAAT,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAA0BC,aAAa,CAACC,SAAAA;AARN,KAAD,CAD7C;IAWHC,OAAO,EAAE,CAACrB,KAAD,CAXN;AAYHsB,IAAAA,GAAG,EAAEzB,CAAAA,qBAAAA,GAAAA,MAAM,CAAC0B,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,oBAAA;AAZ3B,GAHP,CADF,CAAA;AAmBD;;;;"}