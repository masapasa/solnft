{"version":3,"file":"thawDelegatedNft.mjs","sources":["../../../../../src/plugins/nftModule/operations/thawDelegatedNft.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, Signer, useOperation } from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createThawDelegatedAccountInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda, TokenProgram } from '../../tokenModule';\nimport { findMasterEditionV2Pda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ThawDelegatedNftOperation' as const;\n\n/**\n * Thaws a NFT via its delegate authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .thawDelegatedNft({ mintAddress, delegateAuthority })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const thawDelegatedNftOperation =\n  useOperation<ThawDelegatedNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ThawDelegatedNftOperation = Operation<\n  typeof Key,\n  ThawDelegatedNftInput,\n  ThawDelegatedNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ThawDelegatedNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The SPL Token delegate authority.\n   *\n   * This authority should have been approved using\n   * `metaplex.tokens().approveDelegateAuthority()` beforehand.\n   */\n  delegateAuthority: Signer;\n\n  /**\n   * The owner of the token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `tokenOwner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /** The address of the SPL Token program to override if necessary. */\n  tokenProgram?: PublicKey; // Defaults to Token Program.\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ThawDelegatedNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const thawDelegatedNftOperationHandler: OperationHandler<ThawDelegatedNftOperation> =\n  {\n    async handle(\n      operation: ThawDelegatedNftOperation,\n      metaplex: Metaplex\n    ): Promise<ThawDelegatedNftOutput> {\n      return thawDelegatedNftBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ThawDelegatedNftBuilderParams = Omit<\n  ThawDelegatedNftInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that thaws the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Thaws a NFT via its delegate authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .thawDelegatedNft({ mintAddress, delegateAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const thawDelegatedNftBuilder = (\n  metaplex: Metaplex,\n  params: ThawDelegatedNftBuilderParams\n): TransactionBuilder => {\n  const {\n    mintAddress,\n    delegateAuthority,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const editionAddress = findMasterEditionV2Pda(mintAddress);\n  const tokenAddressOrAta =\n    tokenAddress ?? findAssociatedTokenAccountPda(mintAddress, tokenOwner);\n\n  return TransactionBuilder.make().add({\n    instruction: createThawDelegatedAccountInstruction({\n      delegate: delegateAuthority.publicKey,\n      tokenAccount: tokenAddressOrAta,\n      edition: editionAddress,\n      mint: mintAddress,\n      tokenProgram,\n    }),\n    signers: [delegateAuthority],\n    key: params.instructionKey ?? 'thawDelegatedNft',\n  });\n};\n"],"names":["Key","thawDelegatedNftOperation","useOperation","thawDelegatedNftOperationHandler","handle","operation","metaplex","thawDelegatedNftBuilder","input","sendAndConfirm","confirmOptions","params","mintAddress","delegateAuthority","tokenOwner","identity","publicKey","tokenAddress","tokenProgram","TokenProgram","editionAddress","findMasterEditionV2Pda","tokenAddressOrAta","findAssociatedTokenAccountPda","TransactionBuilder","make","add","instruction","createThawDelegatedAccountInstruction","delegate","tokenAccount","edition","mint","signers","key","instructionKey"],"mappings":";;;;;;;AAUA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,yBAAyB,GACpCC,YAAY,CAA4BF,GAA5B,EADP;AAGP;AACA;AACA;AACA;;AAsDA;AACA;AACA;AACA;AACO,MAAMG,gCAA6E,GACxF;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGmC;AACjC,IAAA,OAAOC,uBAAuB,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAAvB,CAAmDC,cAAnD,CACLH,QADK,EAELD,SAAS,CAACG,KAAV,CAAgBE,cAFX,CAAP,CAAA;AAID,GAAA;;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaH,uBAAuB,GAAG,CACrCD,QADqC,EAErCK,MAFqC,KAGd;AAAA,EAAA,IAAA,qBAAA,CAAA;;EACvB,MAAM;IACJC,WADI;IAEJC,iBAFI;AAGJC,IAAAA,UAAU,GAAGR,QAAQ,CAACS,QAAT,GAAoBC,SAH7B;IAIJC,YAJI;IAKJC,YAAY,GAAGC,YAAY,CAACH,SAAAA;AALxB,GAAA,GAMFL,MANJ,CAAA;AAQA,EAAA,MAAMS,cAAc,GAAGC,sBAAsB,CAACT,WAAD,CAA7C,CAAA;AACA,EAAA,MAAMU,iBAAiB,GACrBL,YADqB,KAAA,IAAA,IACrBA,YADqB,KAAA,KAAA,CAAA,GACrBA,YADqB,GACLM,6BAA6B,CAACX,WAAD,EAAcE,UAAd,CAD/C,CAAA;AAGA,EAAA,OAAOU,kBAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;IACnCC,WAAW,EAAEC,qCAAqC,CAAC;MACjDC,QAAQ,EAAEhB,iBAAiB,CAACG,SADqB;AAEjDc,MAAAA,YAAY,EAAER,iBAFmC;AAGjDS,MAAAA,OAAO,EAAEX,cAHwC;AAIjDY,MAAAA,IAAI,EAAEpB,WAJ2C;AAKjDM,MAAAA,YAAAA;AALiD,KAAD,CADf;IAQnCe,OAAO,EAAE,CAACpB,iBAAD,CAR0B;AASnCqB,IAAAA,GAAG,EAAEvB,CAAAA,qBAAAA,GAAAA,MAAM,CAACwB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,kBAAA;AATK,GAA9B,CAAP,CAAA;AAWD;;;;"}