{"version":3,"file":"PurchaseReceiptGpaBuilder.mjs","sources":["../../../../../src/plugins/auctionHouseModule/gpaBuilders/PurchaseReceiptGpaBuilder.ts"],"sourcesContent":["import { GpaBuilder } from '@/utils';\nimport { PublicKey } from '@solana/web3.js';\n\ntype AccountDiscriminator = [\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number,\n  number\n];\n// TODO: copied from auction house SDK\n// SDK should either provide a GPA builder or expose this discriminator\nconst purchaseReceiptDiscriminator: AccountDiscriminator = [\n  79, 127, 222, 137, 154, 131, 150, 134,\n];\n\nconst PUBLIC_KEY_LENGTH = PublicKey.default.toBytes().byteLength;\n\nconst BOOKKEEPER = purchaseReceiptDiscriminator.length;\nconst BUYER = BOOKKEEPER + PUBLIC_KEY_LENGTH;\nconst SELLER = BUYER + PUBLIC_KEY_LENGTH;\nconst AUCTION_HOUSE = SELLER + PUBLIC_KEY_LENGTH;\nconst METADATA = AUCTION_HOUSE + PUBLIC_KEY_LENGTH;\n\nexport class PurchaseReceiptGpaBuilder extends GpaBuilder {\n  whereDiscriminator(discrimator: AccountDiscriminator) {\n    return this.where(0, Buffer.from(discrimator));\n  }\n\n  purchaseReceiptAccounts() {\n    return this.whereDiscriminator(purchaseReceiptDiscriminator);\n  }\n\n  whereBuyer(buyerAddress: PublicKey) {\n    return this.purchaseReceiptAccounts().where(BUYER, buyerAddress);\n  }\n\n  whereSeller(sellerAddress: PublicKey) {\n    return this.purchaseReceiptAccounts().where(SELLER, sellerAddress);\n  }\n\n  whereAuctionHouse(auctionHouseAddress: PublicKey) {\n    return this.purchaseReceiptAccounts().where(\n      AUCTION_HOUSE,\n      auctionHouseAddress\n    );\n  }\n\n  whereMetadata(metadataAddress: PublicKey) {\n    return this.purchaseReceiptAccounts().where(METADATA, metadataAddress);\n  }\n}\n"],"names":["purchaseReceiptDiscriminator","PUBLIC_KEY_LENGTH","PublicKey","default","toBytes","byteLength","BOOKKEEPER","length","BUYER","SELLER","AUCTION_HOUSE","METADATA","PurchaseReceiptGpaBuilder","GpaBuilder","whereDiscriminator","discrimator","where","Buffer","from","purchaseReceiptAccounts","whereBuyer","buyerAddress","whereSeller","sellerAddress","whereAuctionHouse","auctionHouseAddress","whereMetadata","metadataAddress"],"mappings":";;;AAaA;AACA;AACA,MAAMA,4BAAkD,GAAG,CACzD,EADyD,EACrD,GADqD,EAChD,GADgD,EAC3C,GAD2C,EACtC,GADsC,EACjC,GADiC,EAC5B,GAD4B,EACvB,GADuB,CAA3D,CAAA;AAIA,MAAMC,iBAAiB,GAAGC,SAAS,CAACC,OAAV,CAAkBC,OAAlB,GAA4BC,UAAtD,CAAA;AAEA,MAAMC,UAAU,GAAGN,4BAA4B,CAACO,MAAhD,CAAA;AACA,MAAMC,KAAK,GAAGF,UAAU,GAAGL,iBAA3B,CAAA;AACA,MAAMQ,MAAM,GAAGD,KAAK,GAAGP,iBAAvB,CAAA;AACA,MAAMS,aAAa,GAAGD,MAAM,GAAGR,iBAA/B,CAAA;AACA,MAAMU,QAAQ,GAAGD,aAAa,GAAGT,iBAAjC,CAAA;AAEO,MAAMW,yBAAN,SAAwCC,UAAxC,CAAmD;EACxDC,kBAAkB,CAACC,WAAD,EAAoC;IACpD,OAAO,IAAA,CAAKC,KAAL,CAAW,CAAX,EAAcC,MAAM,CAACC,IAAP,CAAYH,WAAZ,CAAd,CAAP,CAAA;AACD,GAAA;;AAEDI,EAAAA,uBAAuB,GAAG;AACxB,IAAA,OAAO,IAAKL,CAAAA,kBAAL,CAAwBd,4BAAxB,CAAP,CAAA;AACD,GAAA;;EAEDoB,UAAU,CAACC,YAAD,EAA0B;IAClC,OAAO,IAAA,CAAKF,uBAAL,EAA+BH,CAAAA,KAA/B,CAAqCR,KAArC,EAA4Ca,YAA5C,CAAP,CAAA;AACD,GAAA;;EAEDC,WAAW,CAACC,aAAD,EAA2B;IACpC,OAAO,IAAA,CAAKJ,uBAAL,EAA+BH,CAAAA,KAA/B,CAAqCP,MAArC,EAA6Cc,aAA7C,CAAP,CAAA;AACD,GAAA;;EAEDC,iBAAiB,CAACC,mBAAD,EAAiC;IAChD,OAAO,IAAA,CAAKN,uBAAL,EAA+BH,CAAAA,KAA/B,CACLN,aADK,EAELe,mBAFK,CAAP,CAAA;AAID,GAAA;;EAEDC,aAAa,CAACC,eAAD,EAA6B;IACxC,OAAO,IAAA,CAAKR,uBAAL,EAA+BH,CAAAA,KAA/B,CAAqCL,QAArC,EAA+CgB,eAA/C,CAAP,CAAA;AACD,GAAA;;AA1BuD;;;;"}