{"version":3,"file":"executeSale.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/executeSale.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder, Option, DisposableScope } from '@/utils';\nimport {\n  AuctioneerExecuteSaleInstructionAccounts,\n  createAuctioneerExecuteSaleInstruction,\n  createExecutePartialSaleInstruction,\n  createExecuteSaleInstruction,\n  createPrintPurchaseReceiptInstruction,\n  ExecutePartialSaleInstructionArgs,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Pda,\n  lamports,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  isSigner,\n  now,\n  amount,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { AuctionHouse, Bid, Listing, LazyPurchase, Purchase } from '../models';\nimport {\n  findAuctionHouseBuyerEscrowPda,\n  findAuctionHouseProgramAsSignerPda,\n  findAuctionHouseTradeStatePda,\n  findPurchaseReceiptPda,\n  findAuctioneerPda,\n} from '../pdas';\nimport {\n  AuctioneerAuthorityRequiredError,\n  AuctioneerPartialSaleNotSupportedError,\n  BidAndListingHaveDifferentAuctionHousesError,\n  BidAndListingHaveDifferentMintsError,\n  CanceledBidIsNotAllowedError,\n  CanceledListingIsNotAllowedError,\n  PartialPriceMismatchError,\n} from '../errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ExecuteSaleOperation' as const;\n\n/**\n * Executes a sale on a given bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .executeSale({ auctionHouse, bid, listing })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const executeSaleOperation = useOperation<ExecuteSaleOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ExecuteSaleOperation = Operation<\n  typeof Key,\n  ExecuteSaleInput,\n  ExecuteSaleOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ExecuteSaleInput = {\n  /**\n   * The Bid that is used in the sale.\n   * We only need a subset of the `Bid` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, buyer, receipt address etc.\n   */\n  bid: Pick<\n    Bid,\n    | 'asset'\n    | 'auctionHouse'\n    | 'buyerAddress'\n    | 'canceledAt'\n    | 'price'\n    | 'receiptAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Listing that is used in the sale.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, seller, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'auctionHouse'\n    | 'canceledAt'\n    | 'price'\n    | 'receiptAddress'\n    | 'sellerAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /** The Auction House in which to execute a sale. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the purchase receipt.\n   * The receipt holds information about the purchase,\n   * So it's important to print it if you want to use the `Purchase` model\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean; // Default: true\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ExecuteSaleOutput = {\n  /** Seller trade state account address encoding the listing order. */\n  sellerTradeState: PublicKey;\n\n  /** Biyer trade state account address encoding the bid order. */\n  buyerTradeState: PublicKey;\n\n  /** The buyer address. */\n  buyer: PublicKey;\n\n  /** The seller address. */\n  seller: PublicKey;\n\n  /** The asset's metadata address. */\n  metadata: PublicKey;\n\n  /** The address of the bookkeeper account responsible for the receipt. */\n  bookkeeper: Option<PublicKey>;\n\n  /** The PDA of the receipt account in case it was printed. */\n  receipt: Option<Pda>;\n\n  /** The sale price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens bought. */\n  tokens: SplTokenAmount;\n\n  /** A model that keeps information about the Purchase. */\n  purchase: Purchase;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * Executes a sale on a given bid and listing.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .executeSale({ auctionHouse, listing, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const executeSaleOperationHandler: OperationHandler<ExecuteSaleOperation> =\n  {\n    async handle(\n      operation: ExecuteSaleOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<ExecuteSaleOutput> {\n      const { auctionHouse } = operation.input;\n\n      const output = await executeSaleBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n      scope.throwIfCanceled();\n\n      if (output.receipt) {\n        const purchase = await metaplex\n          .auctionHouse()\n          .findPurchaseByReceipt({\n            auctionHouse,\n            receiptAddress: output.receipt,\n          })\n          .run(scope);\n\n        return { purchase, ...output };\n      }\n\n      const lazyPurchase: LazyPurchase = {\n        model: 'purchase',\n        lazy: true,\n        auctionHouse: operation.input.auctionHouse,\n        buyerAddress: output.buyer,\n        sellerAddress: output.seller,\n        metadataAddress: output.metadata,\n        bookkeeperAddress: output.bookkeeper,\n        receiptAddress: output.receipt,\n        price: output.price,\n        tokens: output.tokens.basisPoints,\n        createdAt: now(),\n      };\n\n      return {\n        purchase: await metaplex\n          .auctionHouse()\n          .loadPurchase({ lazyPurchase })\n          .run(scope),\n        ...output,\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ExecuteSaleBuilderParams = Omit<\n  ExecuteSaleInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type ExecuteSaleBuilderContext = Omit<\n  ExecuteSaleOutput,\n  'response' | 'purchase'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const executeSaleBuilder = (\n  metaplex: Metaplex,\n  params: ExecuteSaleBuilderParams\n): TransactionBuilder<ExecuteSaleBuilderContext> => {\n  const { auctionHouse, listing, bid, auctioneerAuthority } = params;\n  const { sellerAddress, asset } = listing;\n  const { buyerAddress } = bid;\n  const {\n    hasAuctioneer,\n    isNative,\n    treasuryMint,\n    address: auctionHouseAddress,\n    authorityAddress,\n    feeAccountAddress,\n    treasuryAccountAddress,\n  } = auctionHouse;\n\n  const isPartialSale = bid.tokens.basisPoints < listing.tokens.basisPoints;\n  // Use full size of listing & price when finding trade state PDA for the partial sale.\n  const { tokens, price } = isPartialSale ? listing : bid;\n  const { price: buyerPrice, tokens: buyerTokensSize } = bid;\n\n  if (!listing.auctionHouse.address.equals(bid.auctionHouse.address)) {\n    throw new BidAndListingHaveDifferentAuctionHousesError();\n  }\n  if (!listing.asset.address.equals(bid.asset.address)) {\n    throw new BidAndListingHaveDifferentMintsError();\n  }\n  if (bid.canceledAt) {\n    throw new CanceledBidIsNotAllowedError();\n  }\n  if (listing.canceledAt) {\n    throw new CanceledListingIsNotAllowedError();\n  }\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n  if (isPartialSale && hasAuctioneer) {\n    throw new AuctioneerPartialSaleNotSupportedError();\n  }\n  if (isPartialSale) {\n    const listingPricePerToken = price.basisPoints.div(tokens.basisPoints);\n    const buyerPricePerToken = buyerPrice.basisPoints.div(\n      buyerTokensSize.basisPoints\n    );\n\n    if (!listingPricePerToken.eq(buyerPricePerToken)) {\n      throw new PartialPriceMismatchError(\n        auctionHouse.isNative\n          ? lamports(listingPricePerToken)\n          : amount(listingPricePerToken, auctionHouse.treasuryMint.currency),\n        auctionHouse.isNative\n          ? lamports(buyerPricePerToken)\n          : amount(buyerPricePerToken, auctionHouse.treasuryMint.currency)\n      );\n    }\n  }\n\n  // Accounts.\n  const sellerPaymentReceiptAccount = isNative\n    ? sellerAddress\n    : findAssociatedTokenAccountPda(treasuryMint.address, sellerAddress);\n  const buyerReceiptTokenAccount = findAssociatedTokenAccountPda(\n    asset.address,\n    buyerAddress\n  );\n  const escrowPayment = findAuctionHouseBuyerEscrowPda(\n    auctionHouseAddress,\n    buyerAddress\n  );\n  const freeTradeState = findAuctionHouseTradeStatePda(\n    auctionHouseAddress,\n    sellerAddress,\n    treasuryMint.address,\n    asset.address,\n    lamports(0).basisPoints,\n    tokens.basisPoints,\n    asset.token.address\n  );\n  const programAsSigner = findAuctionHouseProgramAsSignerPda();\n\n  const accounts = {\n    buyer: buyerAddress,\n    seller: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    metadata: asset.metadataAddress,\n    treasuryMint: treasuryMint.address,\n    escrowPaymentAccount: escrowPayment,\n    sellerPaymentReceiptAccount,\n    buyerReceiptTokenAccount,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    auctionHouseTreasury: treasuryAccountAddress,\n    buyerTradeState: bid.tradeStateAddress,\n    sellerTradeState: listing.tradeStateAddress,\n    freeTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    freeTradeStateBump: freeTradeState.bump,\n    escrowPaymentBump: escrowPayment.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Execute Sale Instruction\n  const partialSaleArgs: ExecutePartialSaleInstructionArgs = {\n    ...args,\n    partialOrderSize: bid.tokens.basisPoints,\n    partialOrderPrice: bid.price.basisPoints,\n  };\n\n  let executeSaleInstruction = isPartialSale\n    ? createExecutePartialSaleInstruction(accounts, partialSaleArgs)\n    : createExecuteSaleInstruction(accounts, args);\n\n  if (auctioneerAuthority) {\n    const auctioneerAccounts: AuctioneerExecuteSaleInstructionAccounts = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda: findAuctioneerPda(\n        auctionHouseAddress,\n        auctioneerAuthority.publicKey\n      ),\n    };\n\n    executeSaleInstruction = createAuctioneerExecuteSaleInstruction(\n      auctioneerAccounts,\n      args\n    );\n  }\n\n  // Provide additional keys to pay royalties.\n  asset.creators.forEach(({ address }) => {\n    executeSaleInstruction.keys.push({\n      pubkey: address,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    // Provide ATA to receive SPL token royalty if is not native SOL sale.\n    if (!isNative) {\n      executeSaleInstruction.keys.push({\n        pubkey: findAssociatedTokenAccountPda(treasuryMint.address, address),\n        isWritable: true,\n        isSigner: false,\n      });\n    }\n  });\n\n  // Signers.\n  const executeSaleSigners = [auctioneerAuthority].filter(isSigner);\n\n  // Receipt.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) &&\n    Boolean(listing.receiptAddress && bid.receiptAddress && !isPartialSale);\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const purchaseReceipt = findPurchaseReceiptPda(\n    listing.tradeStateAddress,\n    bid.tradeStateAddress\n  );\n\n  return (\n    TransactionBuilder.make<ExecuteSaleBuilderContext>()\n      .setContext({\n        sellerTradeState: listing.tradeStateAddress,\n        buyerTradeState: bid.tradeStateAddress,\n        buyer: buyerAddress,\n        seller: sellerAddress,\n        metadata: asset.metadataAddress,\n        bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n        receipt: shouldPrintReceipt ? purchaseReceipt : null,\n        price,\n        tokens,\n      })\n\n      // Execute Sale.\n      .add({\n        instruction: executeSaleInstruction,\n        signers: executeSaleSigners,\n        key: params.instructionKey ?? 'executeSale',\n      })\n\n      // Print the Purchase Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintPurchaseReceiptInstruction(\n            {\n              purchaseReceipt: purchaseReceipt,\n              listingReceipt: listing.receiptAddress as Pda,\n              bidReceipt: bid.receiptAddress as Pda,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { purchaseReceiptBump: purchaseReceipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printPurchaseReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","executeSaleOperation","useOperation","executeSaleOperationHandler","handle","operation","metaplex","scope","auctionHouse","input","output","executeSaleBuilder","sendAndConfirm","confirmOptions","throwIfCanceled","receipt","purchase","findPurchaseByReceipt","receiptAddress","run","lazyPurchase","model","lazy","buyerAddress","buyer","sellerAddress","seller","metadataAddress","metadata","bookkeeperAddress","bookkeeper","price","tokens","basisPoints","createdAt","now","loadPurchase","params","listing","bid","auctioneerAuthority","asset","hasAuctioneer","isNative","treasuryMint","address","auctionHouseAddress","authorityAddress","feeAccountAddress","treasuryAccountAddress","isPartialSale","buyerPrice","buyerTokensSize","equals","BidAndListingHaveDifferentAuctionHousesError","BidAndListingHaveDifferentMintsError","canceledAt","CanceledBidIsNotAllowedError","CanceledListingIsNotAllowedError","AuctioneerAuthorityRequiredError","AuctioneerPartialSaleNotSupportedError","listingPricePerToken","div","buyerPricePerToken","eq","PartialPriceMismatchError","lamports","amount","currency","sellerPaymentReceiptAccount","findAssociatedTokenAccountPda","buyerReceiptTokenAccount","escrowPayment","findAuctionHouseBuyerEscrowPda","freeTradeState","findAuctionHouseTradeStatePda","token","programAsSigner","findAuctionHouseProgramAsSignerPda","accounts","tokenAccount","tokenMint","escrowPaymentAccount","authority","auctionHouseFeeAccount","auctionHouseTreasury","buyerTradeState","tradeStateAddress","sellerTradeState","args","freeTradeStateBump","bump","escrowPaymentBump","programAsSignerBump","tokenSize","partialSaleArgs","partialOrderSize","partialOrderPrice","executeSaleInstruction","createExecutePartialSaleInstruction","createExecuteSaleInstruction","auctioneerAccounts","publicKey","ahAuctioneerPda","findAuctioneerPda","createAuctioneerExecuteSaleInstruction","creators","forEach","keys","push","pubkey","isWritable","isSigner","executeSaleSigners","filter","shouldPrintReceipt","printReceipt","Boolean","identity","purchaseReceipt","findPurchaseReceiptPda","TransactionBuilder","make","setContext","add","instruction","signers","key","instructionKey","when","builder","createPrintPurchaseReceiptInstruction","listingReceipt","bidReceipt","SYSVAR_INSTRUCTIONS_PUBKEY","purchaseReceiptBump"],"mappings":"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"}