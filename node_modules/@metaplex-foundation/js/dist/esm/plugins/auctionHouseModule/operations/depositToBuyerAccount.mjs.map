{"version":3,"file":"depositToBuyerAccount.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/depositToBuyerAccount.ts"],"sourcesContent":["import { ConfirmOptions } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  createAuctioneerDepositInstruction,\n  createDepositInstruction,\n  DepositInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  isSigner,\n  SolAmount,\n  SplTokenAmount,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { AuctionHouse } from '../models';\nimport { findAuctioneerPda, findAuctionHouseBuyerEscrowPda } from '../pdas';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DepositToBuyerAccountOperation' as const;\n\n/**\n * Adds funds to the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .depositToBuyerAccount({ auctionHouse, buyer, amount })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const depositToBuyerAccountOperation =\n  useOperation<DepositToBuyerAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DepositToBuyerAccountOperation = Operation<\n  typeof Key,\n  DepositToBuyerAccountInput,\n  DepositToBuyerAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DepositToBuyerAccountInput = {\n  /**\n   * The Auction House in which escrow buyer deposits funds.\n   * We only need a subset of the `AuctionHouse` model but we\n   * need enough information regarding its settings to know how\n   * to deposit funds.\n   *\n   * This includes, its address, authority address, treasury mint, etc.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'hasAuctioneer'\n    | 'isNative'\n    | 'treasuryMint'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The buyer who deposits funds.\n   * This expects a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The Signer paying for the creation of all accounts\n   * required to deposit to the buyer's account.\n   * This account will also pay for the transaction fee.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /**\n   * Amount of funds to deposit.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DepositToBuyerAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const depositToBuyerAccountOperationHandler: OperationHandler<DepositToBuyerAccountOperation> =\n  {\n    handle: async (\n      operation: DepositToBuyerAccountOperation,\n      metaplex: Metaplex\n    ) =>\n      depositToBuyerAccountBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      ),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DepositToBuyerAccountBuilderParams = Omit<\n  DepositToBuyerAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type DepositToBuyerAccountBuilderContext = Omit<\n  DepositToBuyerAccountOutput,\n  'response'\n>;\n\n/**\n * Adds funds to the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .depositToBuyerAccount({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const depositToBuyerAccountBuilder = (\n  metaplex: Metaplex,\n  params: DepositToBuyerAccountBuilderParams\n): TransactionBuilder<DepositToBuyerAccountBuilderContext> => {\n  // Data.\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    amount,\n    instructionKey,\n    buyer = metaplex.identity(),\n    payer = metaplex.identity(),\n  } = params;\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const paymentAccount = auctionHouse.isNative\n    ? toPublicKey(buyer)\n    : findAssociatedTokenAccountPda(\n        auctionHouse.treasuryMint.address,\n        toPublicKey(buyer)\n      );\n  const escrowPayment = findAuctionHouseBuyerEscrowPda(\n    auctionHouse.address,\n    toPublicKey(buyer)\n  );\n\n  const accounts: DepositInstructionAccounts = {\n    wallet: toPublicKey(buyer),\n    paymentAccount,\n    transferAuthority: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: auctionHouse.authorityAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Args.\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amount.basisPoints,\n  };\n\n  // Deposit Instruction.\n  let depositInstruction = createDepositInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = findAuctioneerPda(\n      auctionHouse.address,\n      auctioneerAuthority.publicKey\n    );\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    depositInstruction = createAuctioneerDepositInstruction(\n      { ...accountsWithAuctioneer },\n      args\n    );\n  }\n\n  // Signers.\n  const depositSigners = [buyer, auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n      // Deposit.\n      .add({\n        instruction: depositInstruction,\n        signers: depositSigners,\n        key: instructionKey ?? 'depositToBuyerAccount',\n      })\n  );\n};\n"],"names":["Key","depositToBuyerAccountOperation","useOperation","depositToBuyerAccountOperationHandler","handle","operation","metaplex","depositToBuyerAccountBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","auctioneerAuthority","amount","instructionKey","buyer","identity","payer","hasAuctioneer","AuctioneerAuthorityRequiredError","paymentAccount","isNative","toPublicKey","findAssociatedTokenAccountPda","treasuryMint","address","escrowPayment","findAuctionHouseBuyerEscrowPda","accounts","wallet","transferAuthority","escrowPaymentAccount","authority","authorityAddress","auctionHouseFeeAccount","feeAccountAddress","args","escrowPaymentBump","bump","basisPoints","depositInstruction","createDepositInstruction","ahAuctioneerPda","findAuctioneerPda","publicKey","accountsWithAuctioneer","createAuctioneerDepositInstruction","depositSigners","filter","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key"],"mappings":"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"}