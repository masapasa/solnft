{"version":3,"file":"findBidsByPublicKeyField.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findBidsByPublicKeyField.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { UnreachableCaseError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { findMetadataPda } from '../../nftModule';\nimport { BidReceiptGpaBuilder } from '../gpaBuilders';\nimport { AuctionHouse, Bid, LazyBid, toLazyBid } from '../models';\nimport { AuctionHouseProgram } from '../program';\nimport { toBidReceiptAccount } from '../accounts';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindBidsByPublicKeyOperation' as const;\n\n/**\n * Finds multiple Bids by specific criteria.\n *\n * ```ts\n * // Find bids by buyer.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBidsBy({ auctionHouse, type: 'buyer', publicKey: buyer })\n *   .run();\n *\n * // Find bids by metadata.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBidsBy({ auctionHouse, type: 'metadata', publicKey: metadata })\n *   .run();\n *\n * // Find bids by mint.\n * const bids = await metaplex\n *   .auctionHouse()\n *   .findBidsBy({ auctionHouse, type: 'mint', publicKey: mint })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findBidsByPublicKeyFieldOperation =\n  useOperation<FindBidsByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindBidsByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindBidsByPublicKeyFieldInput,\n  FindBidsByPublicKeyFieldOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindBidsByPublicKeyFieldInput = {\n  /** A type of criteria to use in search. */\n  type: 'buyer' | 'metadata' | 'mint';\n\n  /** A model of the Auction House related to these bids. */\n  auctionHouse: AuctionHouse;\n\n  /** The address to search for. */\n  publicKey: PublicKey;\n\n  /** The level of commitment desired when querying the blockchain. */\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindBidsByPublicKeyFieldOutput = (LazyBid | Bid)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findBidsByPublicKeyFieldOperationHandler: OperationHandler<FindBidsByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindBidsByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindBidsByPublicKeyFieldOutput> => {\n      const { auctionHouse, type, publicKey, commitment } = operation.input;\n      const accounts = AuctionHouseProgram.bidAccounts(metaplex).mergeConfig({\n        commitment,\n      });\n\n      let bidQuery: BidReceiptGpaBuilder = accounts.whereAuctionHouse(\n        auctionHouse.address\n      );\n      switch (type) {\n        case 'buyer':\n          bidQuery = bidQuery.whereBuyer(publicKey);\n          break;\n        case 'metadata':\n          bidQuery = bidQuery.whereMetadata(publicKey);\n          break;\n        case 'mint':\n          bidQuery = bidQuery.whereMetadata(findMetadataPda(publicKey));\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n      scope.throwIfCanceled();\n\n      return bidQuery.getAndMap((account) =>\n        toLazyBid(toBidReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"],"names":["Key","findBidsByPublicKeyFieldOperation","useOperation","findBidsByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","auctionHouse","type","publicKey","commitment","input","accounts","AuctionHouseProgram","bidAccounts","mergeConfig","bidQuery","whereAuctionHouse","address","whereBuyer","whereMetadata","findMetadataPda","UnreachableCaseError","throwIfCanceled","getAndMap","account","toLazyBid","toBidReceiptAccount"],"mappings":";;;;;;;AAYA;AACA;;AAEA,MAAMA,GAAG,GAAG,8BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,iCAAiC,GAC5CC,YAAY,CAAoCF,GAApC,EADP;AAGP;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;AACO,MAAMG,wCAA6F,GACxG;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIsC;IAC5C,MAAM;MAAEC,YAAF;MAAgBC,IAAhB;MAAsBC,SAAtB;AAAiCC,MAAAA,UAAAA;KAAeN,GAAAA,SAAS,CAACO,KAAhE,CAAA;IACA,MAAMC,QAAQ,GAAGC,mBAAmB,CAACC,WAApB,CAAgCT,QAAhC,CAA0CU,CAAAA,WAA1C,CAAsD;AACrEL,MAAAA,UAAAA;AADqE,KAAtD,CAAjB,CAAA;IAIA,IAAIM,QAA8B,GAAGJ,QAAQ,CAACK,iBAAT,CACnCV,YAAY,CAACW,OADsB,CAArC,CAAA;;AAGA,IAAA,QAAQV,IAAR;AACE,MAAA,KAAK,OAAL;AACEQ,QAAAA,QAAQ,GAAGA,QAAQ,CAACG,UAAT,CAAoBV,SAApB,CAAX,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,UAAL;AACEO,QAAAA,QAAQ,GAAGA,QAAQ,CAACI,aAAT,CAAuBX,SAAvB,CAAX,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,MAAL;QACEO,QAAQ,GAAGA,QAAQ,CAACI,aAAT,CAAuBC,eAAe,CAACZ,SAAD,CAAtC,CAAX,CAAA;AACA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIa,oBAAJ,CAAyBd,IAAzB,CAAN,CAAA;AAXJ,KAAA;;AAaAF,IAAAA,KAAK,CAACiB,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOP,QAAQ,CAACQ,SAAT,CAAoBC,OAAD,IACxBC,SAAS,CAACC,mBAAmB,CAACF,OAAD,CAApB,EAA+BlB,YAA/B,CADJ,CAAP,CAAA;AAGD,GAAA;AAhCH;;;;"}