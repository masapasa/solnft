{"version":3,"file":"findListingsByPublicKeyField.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findListingsByPublicKeyField.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { UnreachableCaseError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { findMetadataPda } from '../../nftModule';\nimport { ListingReceiptGpaBuilder } from '../gpaBuilders';\nimport { AuctionHouse, LazyListing, Listing, toLazyListing } from '../models';\nimport { AuctionHouseProgram } from '../program';\nimport { toListingReceiptAccount } from '../accounts';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindListingsByPublicKeyOperation' as const;\n\n/**\n * Finds multiple Listings by specific criteria.\n *\n * ```ts\n * // Find listings by seller.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListingsBy({ auctionHouse, type: 'seller', publicKey: seller })\n *   .run();\n *\n * // Find listings by metadata.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListingsBy({ auctionHouse, type: 'metadata', publicKey: metadata })\n *   .run();\n *\n * // Find listings by mint.\n * const listings = await metaplex\n *   .auctionHouse()\n *   .findListingsBy({ auctionHouse, type: 'mint', publicKey: mint })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findListingsByPublicKeyFieldOperation =\n  useOperation<FindListingsByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindListingsByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindListingsByPublicKeyFieldInput,\n  FindListingsByPublicKeyFieldOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindListingsByPublicKeyFieldInput = {\n  /** A type of criteria to use in search. */\n  type: 'seller' | 'metadata' | 'mint';\n\n  /** A model of the Auction House related to these listings. */\n  auctionHouse: AuctionHouse;\n\n  /** The address to search for. */\n  publicKey: PublicKey;\n\n  /** The level of commitment desired when querying the blockchain. */\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindListingsByPublicKeyFieldOutput = (Listing | LazyListing)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findListingsByPublicKeyFieldOperationHandler: OperationHandler<FindListingsByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindListingsByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindListingsByPublicKeyFieldOutput> => {\n      const { auctionHouse, type, publicKey, commitment } = operation.input;\n      const accounts = AuctionHouseProgram.listingAccounts(\n        metaplex\n      ).mergeConfig({\n        commitment,\n      });\n\n      let listingQuery: ListingReceiptGpaBuilder = accounts.whereAuctionHouse(\n        auctionHouse.address\n      );\n      switch (type) {\n        case 'seller':\n          listingQuery = listingQuery.whereSeller(publicKey);\n          break;\n        case 'metadata':\n          listingQuery = listingQuery.whereMetadata(publicKey);\n          break;\n        case 'mint':\n          listingQuery = listingQuery.whereMetadata(findMetadataPda(publicKey));\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n      scope.throwIfCanceled();\n\n      return listingQuery.getAndMap((account) =>\n        toLazyListing(toListingReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"],"names":["Key","findListingsByPublicKeyFieldOperation","useOperation","findListingsByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","auctionHouse","type","publicKey","commitment","input","accounts","AuctionHouseProgram","listingAccounts","mergeConfig","listingQuery","whereAuctionHouse","address","whereSeller","whereMetadata","findMetadataPda","UnreachableCaseError","throwIfCanceled","getAndMap","account","toLazyListing","toListingReceiptAccount"],"mappings":";;;;;;;AAYA;AACA;;AAEA,MAAMA,GAAG,GAAG,kCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qCAAqC,GAChDC,YAAY,CAAwCF,GAAxC,EADP;AAGP;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;AACO,MAAMG,4CAAqG,GAChH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0C;IAChD,MAAM;MAAEC,YAAF;MAAgBC,IAAhB;MAAsBC,SAAtB;AAAiCC,MAAAA,UAAAA;KAAeN,GAAAA,SAAS,CAACO,KAAhE,CAAA;IACA,MAAMC,QAAQ,GAAGC,mBAAmB,CAACC,eAApB,CACfT,QADe,CAEfU,CAAAA,WAFe,CAEH;AACZL,MAAAA,UAAAA;AADY,KAFG,CAAjB,CAAA;IAMA,IAAIM,YAAsC,GAAGJ,QAAQ,CAACK,iBAAT,CAC3CV,YAAY,CAACW,OAD8B,CAA7C,CAAA;;AAGA,IAAA,QAAQV,IAAR;AACE,MAAA,KAAK,QAAL;AACEQ,QAAAA,YAAY,GAAGA,YAAY,CAACG,WAAb,CAAyBV,SAAzB,CAAf,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,UAAL;AACEO,QAAAA,YAAY,GAAGA,YAAY,CAACI,aAAb,CAA2BX,SAA3B,CAAf,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,MAAL;QACEO,YAAY,GAAGA,YAAY,CAACI,aAAb,CAA2BC,eAAe,CAACZ,SAAD,CAA1C,CAAf,CAAA;AACA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIa,oBAAJ,CAAyBd,IAAzB,CAAN,CAAA;AAXJ,KAAA;;AAaAF,IAAAA,KAAK,CAACiB,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOP,YAAY,CAACQ,SAAb,CAAwBC,OAAD,IAC5BC,aAAa,CAACC,uBAAuB,CAACF,OAAD,CAAxB,EAAmClB,YAAnC,CADR,CAAP,CAAA;AAGD,GAAA;AAlCH;;;;"}