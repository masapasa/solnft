{"version":3,"file":"withdrawFromFeeAccount.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromFeeAccount.ts"],"sourcesContent":["import { ConfirmOptions } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  createWithdrawFromFeeInstruction,\n  WithdrawFromFeeInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctionHouse } from '../models';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromFeeAccountOperation' as const;\n\n/**\n * Transfers funds from Auction House Fee Wallet to the Fee Withdrawal Destination Wallet.\n * By default Fee Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdrawFromFeeAccount({ auctionHouse, amount })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromFeeAccountOperation =\n  useOperation<WithdrawFromFeeAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromFeeAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromFeeAccountInput,\n  WithdrawFromFeeAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WithdrawFromFeeAccountInput = {\n  /**\n   * The Auction House from which to transfer funds from the fee wallet to the fee withdrawal destination wallet.\n   * `feeWithdrawalDestinationAddress` is set on Auction House creation, but you can also change it via the `update` operation.\n   * */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'feeWithdrawalDestinationAddress'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The Auction House authority.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The Signer paying for the transaction fee.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromFeeAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromFeeAccountOperationHandler: OperationHandler<WithdrawFromFeeAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromFeeAccountOperation,\n      metaplex: Metaplex\n    ) =>\n      withdrawFromFeeAccountBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      ),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromFeeAccountBuilderParams = Omit<\n  WithdrawFromFeeAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromFeeAccountBuilderContext = Omit<\n  WithdrawFromFeeAccountOutput,\n  'response'\n>;\n\n/**\n * Transfers funds from Auction House Fee Wallet to the Fee Withdrawal Destination Wallet.\n * By default Fee Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromFeeAccount({ auctionHouse, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromFeeAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromFeeAccountBuilderParams\n): TransactionBuilder<WithdrawFromFeeAccountBuilderContext> => {\n  // Data.\n  const {\n    auctionHouse,\n    amount,\n    instructionKey,\n    payer = metaplex.identity(),\n    authority = metaplex.identity(),\n  } = params;\n\n  // Accounts.\n  const accounts: WithdrawFromFeeInstructionAccounts = {\n    authority: auctionHouse.authorityAddress,\n    feeWithdrawalDestination: auctionHouse.feeWithdrawalDestinationAddress,\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Args.\n  const args = {\n    amount: amount.basisPoints,\n  };\n\n  // Withdraw From Fee Instruction.\n  const withdrawFromFeeInstruction = createWithdrawFromFeeInstruction(\n    accounts,\n    args\n  );\n\n  // Signers.\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n      // Withdraw From Fee.\n      .add({\n        instruction: withdrawFromFeeInstruction,\n        signers: [authority],\n        key: instructionKey ?? 'withdrawFromFeeAccount',\n      })\n  );\n};\n"],"names":["Key","withdrawFromFeeAccountOperation","useOperation","withdrawFromFeeAccountOperationHandler","handle","operation","metaplex","withdrawFromFeeAccountBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","amount","instructionKey","payer","identity","authority","accounts","authorityAddress","feeWithdrawalDestination","feeWithdrawalDestinationAddress","address","auctionHouseFeeAccount","feeAccountAddress","args","basisPoints","withdrawFromFeeInstruction","createWithdrawFromFeeInstruction","TransactionBuilder","make","setFeePayer","add","instruction","signers","key"],"mappings":";;;;AAkBA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,iCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,+BAA+B,GAC1CC,YAAY,CAAkCF,GAAlC,EADP;AAGP;AACA;AACA;AACA;;AAyDA;AACA;AACA;AACA;AACO,MAAMG,sCAAyF,GACpG;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,KAINC,6BAA6B,CAACD,QAAD,EAAWD,SAAS,CAACG,KAArB,CAA7B,CAAyDC,cAAzD,CACEH,QADF,EAEED,SAAS,CAACG,KAAV,CAAgBE,cAFlB,CAAA;AALJ;AAYF;AACA;;AAEA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaH,6BAA6B,GAAG,CAC3CD,QAD2C,EAE3CK,MAF2C,KAGkB;AAC7D;EACA,MAAM;IACJC,YADI;IAEJC,MAFI;IAGJC,cAHI;AAIJC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,QAAT,EAJJ;IAKJC,SAAS,GAAGX,QAAQ,CAACU,QAAT,EAAA;GACVL,GAAAA,MANJ,CAF6D;;AAW7D,EAAA,MAAMO,QAA4C,GAAG;IACnDD,SAAS,EAAEL,YAAY,CAACO,gBAD2B;IAEnDC,wBAAwB,EAAER,YAAY,CAACS,+BAFY;IAGnDT,YAAY,EAAEA,YAAY,CAACU,OAHwB;IAInDC,sBAAsB,EAAEX,YAAY,CAACY,iBAAAA;AAJc,GAArD,CAX6D;;AAmB7D,EAAA,MAAMC,IAAI,GAAG;IACXZ,MAAM,EAAEA,MAAM,CAACa,WAAAA;AADJ,GAAb,CAnB6D;;EAwB7D,MAAMC,0BAA0B,GAAGC,gCAAgC,CACjEV,QADiE,EAEjEO,IAFiE,CAAnE,CAxB6D;;AA8B7D,EAAA,OACEI,kBAAkB,CAACC,IAAnB,GACGC,WADH,CACehB,KADf,CAEE;AAFF,GAGGiB,GAHH,CAGO;AACHC,IAAAA,WAAW,EAAEN,0BADV;IAEHO,OAAO,EAAE,CAACjB,SAAD,CAFN;AAGHkB,IAAAA,GAAG,EAAErB,cAAF,KAAA,IAAA,IAAEA,cAAF,KAAA,KAAA,CAAA,GAAEA,cAAF,GAAoB,wBAAA;AAHpB,GAHP,CADF,CAAA;AAUD;;;;"}