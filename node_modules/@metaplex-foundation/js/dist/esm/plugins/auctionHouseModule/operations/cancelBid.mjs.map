{"version":3,"file":"cancelBid.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/cancelBid.ts"],"sourcesContent":["import { ConfirmOptions, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  CancelInstructionAccounts,\n  createCancelBidReceiptInstruction,\n  createCancelInstruction,\n  createAuctioneerCancelInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  isSigner,\n  toPublicKey,\n  Pda,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctionHouse, Bid } from '../models';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { findAuctioneerPda } from '../pdas';\nimport { NftWithToken, SftWithToken } from '@/plugins/nftModule';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelBidOperation' as const;\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelBid({ auctionHouse, bid })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const cancelBidOperation = useOperation<CancelBidOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelBidOperation = Operation<\n  typeof Key,\n  CancelBidInput,\n  CancelBidOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelBidInput = {\n  /**\n   * The Auction House in which to cancel Bid.\n   * We only need a subset of the `AuctionHouse` model but we\n   * need enough information regarding its settings to know how\n   * to cancel bid.\n   *\n   * This includes, its address, authority address, its fee account address, etc.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    'authorityAddress' | 'address' | 'feeAccountAddress' | 'hasAuctioneer'\n  >;\n\n  /**\n   * The Bid to cancel.\n   * We only need a subset of the `Bid` model but we\n   * need enough information regarding its settings to know how\n   * to cancel it.\n   *\n   * This includes, its asset, buyer address, price, receipt address etc.\n   */\n  bid: Pick<\n    Bid,\n    | 'asset'\n    | 'buyerAddress'\n    | 'isPublic'\n    | 'price'\n    | 'receiptAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelBidOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelBidOperationHandler: OperationHandler<CancelBidOperation> = {\n  handle: async (operation: CancelBidOperation, metaplex: Metaplex) =>\n    cancelBidBuilder(operation.input).sendAndConfirm(\n      metaplex,\n      operation.input.confirmOptions\n    ),\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelBidBuilderParams = Omit<CancelBidInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelBidBuilderContext = Omit<CancelBidOutput, 'response'>;\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelBid({ auctionHouse, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelBidBuilder = (\n  params: CancelBidBuilderParams\n): TransactionBuilder<CancelBidBuilderContext> => {\n  const { auctionHouse, auctioneerAuthority, bid } = params;\n\n  // Data.\n  const {\n    asset,\n    buyerAddress,\n    tradeStateAddress,\n    price,\n    receiptAddress,\n    tokens,\n    isPublic,\n  } = bid;\n  const {\n    authorityAddress,\n    address: auctionHouseAddress,\n    feeAccountAddress,\n    hasAuctioneer,\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const tokenAccount = isPublic\n    ? findAssociatedTokenAccountPda(\n        asset.mint.address,\n        toPublicKey(buyerAddress)\n      )\n    : (asset as SftWithToken | NftWithToken).token.address;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: buyerAddress,\n    tokenAccount,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Bid Instruction.\n  let cancelBidInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelBidInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouseAddress,\n          auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n\n      // Cancel Bid.\n      .add({\n        instruction: cancelBidInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelBid',\n      })\n\n      // Cancel Bid Receipt.\n      .when(Boolean(receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelBidReceiptInstruction({\n            receipt: receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelBidReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","cancelBidOperation","useOperation","cancelBidOperationHandler","handle","operation","metaplex","cancelBidBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","auctioneerAuthority","bid","asset","buyerAddress","tradeStateAddress","price","receiptAddress","tokens","isPublic","authorityAddress","address","auctionHouseAddress","feeAccountAddress","hasAuctioneer","AuctioneerAuthorityRequiredError","tokenAccount","findAssociatedTokenAccountPda","mint","toPublicKey","token","accounts","wallet","tokenMint","authority","auctionHouseFeeAccount","tradeState","args","buyerPrice","basisPoints","tokenSize","cancelBidInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","cancelSigners","filter","isSigner","TransactionBuilder","make","add","instruction","signers","key","instructionKey","when","Boolean","builder","createCancelBidReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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"}