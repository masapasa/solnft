{"version":3,"file":"createListing.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/createListing.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport {\n  createAuctioneerSellInstruction,\n  createPrintListingReceiptInstruction,\n  createSellInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport type { Metaplex } from '@/Metaplex';\nimport type { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  token,\n  lamports,\n  isSigner,\n  Pda,\n  amount,\n  SolAmount,\n  SplTokenAmount,\n  now,\n} from '@/types';\nimport { TransactionBuilder, Option, DisposableScope } from '@/utils';\nimport {\n  findAuctioneerPda,\n  findAuctionHouseProgramAsSignerPda,\n  findAuctionHouseTradeStatePda,\n  findListingReceiptPda,\n} from '../pdas';\nimport { AuctionHouse, LazyListing, Listing } from '../models';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { findMetadataPda } from '../../nftModule';\nimport { AUCTIONEER_PRICE } from '../constants';\nimport {\n  AuctioneerAuthorityRequiredError,\n  CreateListingRequiresSignerError,\n} from '../errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateListingOperation' as const;\n\n/**\n * Creates a listing on a given asset.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .createListing({ auctionHouse, mintAccount })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createListingOperation = useOperation<CreateListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateListingOperation = Operation<\n  typeof Key,\n  CreateListingInput,\n  CreateListingOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateListingInput = {\n  /** A model of the Auction House related to this listing. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Signer paying for the creation of all accounts\n   * required to create a new listing.\n   * This account will also pay for the transaction fee.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /**\n   * Creator of a listing.\n   *\n   * The wallet being a signer is the only condition in which an NFT can sell at a price of 0.\n   * If the user does list at 0 then auction house can change the sale price if the 'can_change_sale_price' option is true.\n   * If the trade is not priced at 0, the wallet holder has to be a signer since auction house cannot sign if listing over 0.\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  seller?: PublicKey | Signer;\n\n  /**\n   * The Auction House authority.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   * Auction house should be the signer for changing the price instead of user wallet for cases when seller lists at 0.\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The mint account to create a listing for.\n   * This is used to find the metadata.\n   */\n  mintAccount: PublicKey;\n\n  /**\n   * The token account address that's associated to the asset a listing created is for.\n   *\n   * @defaultValue Seller's Associated Token Account.\n   */\n  tokenAccount?: PublicKey;\n\n  /**\n   * The listing price.\n   *\n   * @defaultValue 0 SOLs or tokens.\n   */\n  price?: SolAmount | SplTokenAmount;\n\n  /**\n   * The number of tokens to list.\n   * For an NFT listing it must be 1 token.\n   *\n   * When a Fungible Asset is put on sale.\n   * The buyer can then create a buy order of said assets that is\n   * less than the token_size of the sell order.\n   *\n   * @defaultValue 1 token.\n   */\n  tokens?: SplTokenAmount;\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the listing receipt.\n   * The receipt holds information about the listing,\n   * So it's important to print it if you want to use the `Listing` model\n   *\n   * The receipt printing is skipped for the Auctioneer Auction House\n   * Since it currently doesn't support it.\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateListingOutput = {\n  /** Seller trade state account PDA encoding the listing order. */\n  sellerTradeState: Pda;\n\n  /** Seller free trade state account PDA encoding the free listing order. */\n  freeSellerTradeState: Pda;\n\n  /** The asset's token account address. */\n  tokenAccount: PublicKey;\n\n  /** The asset's metadata PDA. */\n  metadata: Pda;\n\n  /** The seller address. */\n  seller: PublicKey;\n\n  /** The PDA of the receipt account in case it was printed. */\n  receipt: Option<Pda>;\n\n  /** The address of the bookkeeper account responsible for the receipt. */\n  bookkeeper: Option<PublicKey>;\n\n  /** The listing price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens listed. */\n  tokens: SplTokenAmount;\n\n  /** A model that keeps information about the Listing. */\n  listing: Listing;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createListingOperationHandler: OperationHandler<CreateListingOperation> =\n  {\n    async handle(\n      operation: CreateListingOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateListingOutput> {\n      const { auctionHouse, confirmOptions } = operation.input;\n\n      const output = await createListingBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      if (output.receipt) {\n        const listing = await metaplex\n          .auctionHouse()\n          .findListingByReceipt({\n            receiptAddress: output.receipt,\n            auctionHouse,\n          })\n          .run(scope);\n\n        return { listing, ...output };\n      }\n\n      scope.throwIfCanceled();\n      const lazyListing: LazyListing = {\n        model: 'listing',\n        lazy: true,\n        auctionHouse,\n        tradeStateAddress: output.sellerTradeState,\n        bookkeeperAddress: output.bookkeeper,\n        sellerAddress: output.seller,\n        metadataAddress: output.metadata,\n        receiptAddress: output.receipt,\n        purchaseReceiptAddress: null,\n        price: output.price,\n        tokens: output.tokens.basisPoints,\n        createdAt: now(),\n        canceledAt: null,\n      };\n\n      return {\n        listing: await metaplex\n          .auctionHouse()\n          .loadListing({ lazyListing })\n          .run(scope),\n        ...output,\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * Creates a listing on a given asset.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createListing({ auctionHouse, mintAccount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport type CreateListingBuilderParams = Omit<\n  CreateListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateListingBuilderContext = Omit<\n  CreateListingOutput,\n  'response' | 'listing'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createListingBuilder = (\n  metaplex: Metaplex,\n  params: CreateListingBuilderParams\n): TransactionBuilder<CreateListingBuilderContext> => {\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    mintAccount,\n    payer = metaplex.identity(),\n    tokens = token(1),\n    seller = metaplex.identity(),\n    authority = auctionHouse.authorityAddress,\n  } = params;\n\n  // Data.\n  const priceBasisPoint = auctioneerAuthority\n    ? AUCTIONEER_PRICE\n    : params.price?.basisPoints ?? 0;\n  const price = auctionHouse.isNative\n    ? lamports(priceBasisPoint)\n    : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n  if (!isSigner(seller) && !isSigner(authority)) {\n    throw new CreateListingRequiresSignerError();\n  }\n\n  // Accounts.\n  const metadata = findMetadataPda(mintAccount);\n  const tokenAccount =\n    params.tokenAccount ??\n    findAssociatedTokenAccountPda(mintAccount, toPublicKey(seller));\n  const sellerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(seller),\n    auctionHouse.treasuryMint.address,\n    mintAccount,\n    price.basisPoints,\n    tokens.basisPoints,\n    tokenAccount\n  );\n  const freeSellerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(seller),\n    auctionHouse.treasuryMint.address,\n    mintAccount,\n    lamports(0).basisPoints,\n    tokens.basisPoints,\n    tokenAccount\n  );\n  const programAsSigner = findAuctionHouseProgramAsSignerPda();\n  const accounts = {\n    wallet: toPublicKey(seller),\n    tokenAccount,\n    metadata,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    sellerTradeState,\n    freeSellerTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    tradeStateBump: sellerTradeState.bump,\n    freeTradeStateBump: freeSellerTradeState.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Sell Instruction.\n  let sellInstruction = createSellInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    sellInstruction = createAuctioneerSellInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouse.address,\n          auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const signer = isSigner(seller) ? seller : (authority as Signer);\n  const sellSigners = [signer, auctioneerAuthority].filter(isSigner);\n\n  // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.\n  const signerKeyIndex = sellInstruction.keys.findIndex((key) =>\n    key.pubkey.equals(signer.publicKey)\n  );\n  sellInstruction.keys[signerKeyIndex].isSigner = true;\n\n  // Receipt.\n  // Since createPrintListingReceiptInstruction can't deserialize createAuctioneerSellInstruction due to a bug\n  // Don't print Auctioneer Sell receipt for the time being.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) && !auctioneerAuthority;\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const receipt = findListingReceiptPda(sellerTradeState);\n\n  return (\n    TransactionBuilder.make<CreateListingBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        sellerTradeState,\n        freeSellerTradeState,\n        tokenAccount,\n        metadata,\n        seller: toPublicKey(seller),\n        receipt: shouldPrintReceipt ? receipt : null,\n        bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n        price,\n        tokens,\n      })\n\n      // Create Listing.\n      .add({\n        instruction: sellInstruction,\n        signers: sellSigners,\n        key: 'sell',\n      })\n\n      // Print the Listing Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintListingReceiptInstruction(\n            {\n              receipt,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { receiptBump: receipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printListingReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","createListingOperation","useOperation","createListingOperationHandler","handle","operation","metaplex","scope","auctionHouse","confirmOptions","input","output","createListingBuilder","sendAndConfirm","throwIfCanceled","receipt","listing","findListingByReceipt","receiptAddress","run","lazyListing","model","lazy","tradeStateAddress","sellerTradeState","bookkeeperAddress","bookkeeper","sellerAddress","seller","metadataAddress","metadata","purchaseReceiptAddress","price","tokens","basisPoints","createdAt","now","canceledAt","loadListing","params","auctioneerAuthority","mintAccount","payer","identity","token","authority","authorityAddress","priceBasisPoint","AUCTIONEER_PRICE","isNative","lamports","amount","treasuryMint","currency","hasAuctioneer","AuctioneerAuthorityRequiredError","isSigner","CreateListingRequiresSignerError","findMetadataPda","tokenAccount","findAssociatedTokenAccountPda","toPublicKey","findAuctionHouseTradeStatePda","address","freeSellerTradeState","programAsSigner","findAuctionHouseProgramAsSignerPda","accounts","wallet","auctionHouseFeeAccount","feeAccountAddress","args","tradeStateBump","bump","freeTradeStateBump","programAsSignerBump","buyerPrice","tokenSize","sellInstruction","createSellInstruction","createAuctioneerSellInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","signer","sellSigners","filter","signerKeyIndex","keys","findIndex","key","pubkey","equals","shouldPrintReceipt","printReceipt","findListingReceiptPda","TransactionBuilder","make","setFeePayer","setContext","add","instruction","signers","when","builder","createPrintListingReceiptInstruction","SYSVAR_INSTRUCTIONS_PUBKEY","receiptBump"],"mappings":"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"}