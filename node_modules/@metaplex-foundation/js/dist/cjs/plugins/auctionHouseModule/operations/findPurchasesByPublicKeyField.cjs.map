{"version":3,"file":"findPurchasesByPublicKeyField.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchasesByPublicKeyField.ts"],"sourcesContent":["import { Commitment, PublicKey } from '@solana/web3.js';\nimport { UnreachableCaseError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { findMetadataPda } from '../../nftModule';\nimport { PurchaseReceiptGpaBuilder } from '../gpaBuilders';\nimport {\n  AuctionHouse,\n  Purchase,\n  LazyPurchase,\n  toLazyPurchase,\n} from '../models';\nimport { AuctionHouseProgram } from '../program';\nimport { toPurchaseReceiptAccount } from '../accounts';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchasesByPublicKeyOperation' as const;\n\n/**\n * Finds multiple Purchases by specific criteria.\n *\n * ```ts\n * // Find purchases by seller.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchasesBy({ auctionHouse, type: 'seller', publicKey: seller })\n *   .run();\n *\n * // Find purchases by buyer.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchasesBy({ auctionHouse, type: 'buyer', publicKey: buyer })\n *   .run();\n *\n * // Find purchases by metadata.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchasesBy({ auctionHouse, type: 'metadata', publicKey: metadata })\n *   .run();\n *\n * // Find purchases by mint.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchasesBy({ auctionHouse, type: 'mint', publicKey: mint })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchasesByPublicKeyFieldOperation =\n  useOperation<FindPurchasesByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchasesByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindPurchasesByPublicKeyFieldInput,\n  FindPurchasesByPublicKeyFieldOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchasesByPublicKeyFieldInput = {\n  /** A type of criteria to use in search. */\n  type: 'buyer' | 'seller' | 'metadata' | 'mint';\n\n  /** A model of the Auction House related to these purchases. */\n  auctionHouse: AuctionHouse;\n\n  /** The address to search for. */\n  publicKey: PublicKey;\n\n  /** The level of commitment desired when querying the blockchain. */\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindPurchasesByPublicKeyFieldOutput = (Purchase | LazyPurchase)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchasesByPublicKeyFieldOperationHandler: OperationHandler<FindPurchasesByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindPurchasesByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<FindPurchasesByPublicKeyFieldOutput> => {\n      const { auctionHouse, type, publicKey, commitment } = operation.input;\n      const accounts = AuctionHouseProgram.purchaseAccounts(\n        metaplex\n      ).mergeConfig({\n        commitment,\n      });\n\n      let purchaseQuery: PurchaseReceiptGpaBuilder = accounts.whereAuctionHouse(\n        auctionHouse.address\n      );\n      switch (type) {\n        case 'buyer':\n          purchaseQuery = purchaseQuery.whereBuyer(publicKey);\n          break;\n        case 'seller':\n          purchaseQuery = purchaseQuery.whereSeller(publicKey);\n          break;\n        case 'metadata':\n          purchaseQuery = purchaseQuery.whereMetadata(publicKey);\n          break;\n        case 'mint':\n          purchaseQuery = purchaseQuery.whereMetadata(\n            findMetadataPda(publicKey)\n          );\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n      scope.throwIfCanceled();\n\n      return purchaseQuery.getAndMap((account) =>\n        toLazyPurchase(toPurchaseReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"],"names":["Key","findPurchasesByPublicKeyFieldOperation","useOperation","findPurchasesByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","auctionHouse","type","publicKey","commitment","input","accounts","AuctionHouseProgram","purchaseAccounts","mergeConfig","purchaseQuery","whereAuctionHouse","address","whereBuyer","whereSeller","whereMetadata","findMetadataPda","UnreachableCaseError","throwIfCanceled","getAndMap","account","toLazyPurchase","toPurchaseReceiptAccount"],"mappings":";;;;;;;;;;;AAiBA;AACA;;AAEA,MAAMA,GAAG,GAAG,mCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,sCAAsC,GACjDC,sBAAY,CAAyCF,GAAzC,EADP;AAGP;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;AACO,MAAMG,6CAAuG,GAClH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI2C;IACjD,MAAM;MAAEC,YAAF;MAAgBC,IAAhB;MAAsBC,SAAtB;AAAiCC,MAAAA,UAAAA;KAAeN,GAAAA,SAAS,CAACO,KAAhE,CAAA;IACA,MAAMC,UAAQ,GAAGC,2BAAmB,CAACC,gBAApB,CACfT,QADe,CAEfU,CAAAA,WAFe,CAEH;AACZL,MAAAA,UAAAA;AADY,KAFG,CAAjB,CAAA;IAMA,IAAIM,aAAwC,GAAGJ,UAAQ,CAACK,iBAAT,CAC7CV,YAAY,CAACW,OADgC,CAA/C,CAAA;;AAGA,IAAA,QAAQV,IAAR;AACE,MAAA,KAAK,OAAL;AACEQ,QAAAA,aAAa,GAAGA,aAAa,CAACG,UAAd,CAAyBV,SAAzB,CAAhB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,QAAL;AACEO,QAAAA,aAAa,GAAGA,aAAa,CAACI,WAAd,CAA0BX,SAA1B,CAAhB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,UAAL;AACEO,QAAAA,aAAa,GAAGA,aAAa,CAACK,aAAd,CAA4BZ,SAA5B,CAAhB,CAAA;AACA,QAAA,MAAA;;AACF,MAAA,KAAK,MAAL;QACEO,aAAa,GAAGA,aAAa,CAACK,aAAd,CACdC,oBAAe,CAACb,SAAD,CADD,CAAhB,CAAA;AAGA,QAAA,MAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIc,6BAAJ,CAAyBf,IAAzB,CAAN,CAAA;AAhBJ,KAAA;;AAkBAF,IAAAA,KAAK,CAACkB,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOR,aAAa,CAACS,SAAd,CAAyBC,OAAD,IAC7BC,uBAAc,CAACC,iCAAwB,CAACF,OAAD,CAAzB,EAAoCnB,YAApC,CADT,CAAP,CAAA;AAGD,GAAA;AAvCH;;;;;"}