{"version":3,"file":"findBidByTradeState.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findBidByTradeState.ts"],"sourcesContent":["import type { Commitment, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { findBidReceiptPda } from '../pdas';\nimport { AuctionHouse, Bid } from '../models';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindBidByTradeStateOperation' as const;\n\n/**\n * Finds a Bid by its trade state address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findBidByTradeState({ tradeStateAddress, auctionHouse })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findBidByTradeStateOperation =\n  useOperation<FindBidByTradeStateOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindBidByTradeStateOperation = Operation<\n  typeof Key,\n  FindBidByTradeStateInput,\n  Bid\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindBidByTradeStateInput = {\n  /** Buyer trade state PDA account encoding the bid order. */\n  tradeStateAddress: PublicKey;\n\n  /** A model of the Auction House related to this bid. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean; // Default: true\n\n  /** The level of commitment desired when querying the blockchain. */\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findBidByTradeStateOperationHandler: OperationHandler<FindBidByTradeStateOperation> =\n  {\n    handle: async (\n      operation: FindBidByTradeStateOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const { tradeStateAddress } = operation.input;\n\n      const receiptAddress = findBidReceiptPda(tradeStateAddress);\n\n      return metaplex\n        .auctionHouse()\n        .findBidByReceipt({ receiptAddress, ...operation.input })\n        .run(scope);\n    },\n  };\n"],"names":["Key","findBidByTradeStateOperation","useOperation","findBidByTradeStateOperationHandler","handle","operation","metaplex","scope","tradeStateAddress","input","receiptAddress","findBidReceiptPda","auctionHouse","findBidByReceipt","run"],"mappings":";;;;;;;AAOA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,8BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,4BAA4B,GACvCC,sBAAY,CAA+BF,GAA/B,EADP;AAGP;AACA;AACA;AACA;;AA6BA;AACA;AACA;AACA;AACO,MAAMG,mCAAmF,GAC9F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;AAAEC,MAAAA,iBAAAA;KAAsBH,GAAAA,SAAS,CAACI,KAAxC,CAAA;AAEA,IAAA,MAAMC,cAAc,GAAGC,sBAAiB,CAACH,iBAAD,CAAxC,CAAA;AAEA,IAAA,OAAOF,QAAQ,CACZM,YADI,EAAA,CAEJC,gBAFI,CAEa;MAAEH,cAAF;AAAkB,MAAA,GAAGL,SAAS,CAACI,KAAAA;AAA/B,KAFb,CAGJK,CAAAA,GAHI,CAGAP,KAHA,CAAP,CAAA;AAID,GAAA;AAdH;;;;;"}