{"version":3,"file":"findPurchaseByTradeState.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchaseByTradeState.ts"],"sourcesContent":["import type { Commitment, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler } from '@/types';\nimport { DisposableScope } from '@/utils';\nimport { AuctionHouse, Purchase } from '../models';\nimport { findPurchaseReceiptPda } from '../pdas';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchaseByTradeStateOperation' as const;\n\n/**\n * Finds a Purchase by its trade state address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findPurchaseByTradeState({ sellerTradeState, buyerTradeState, auctionHouse })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchaseByTradeStateOperation =\n  useOperation<FindPurchaseByTradeStateOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchaseByTradeStateOperation = Operation<\n  typeof Key,\n  FindPurchaseByTradeStateInput,\n  Purchase\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchaseByTradeStateInput = {\n  /** Seller trade state PDA account encoding the listing order. */\n  sellerTradeState: PublicKey;\n\n  /** Buyer trade state PDA account encoding the bid order. */\n  buyerTradeState: PublicKey;\n\n  /** A model of the Auction House related to this purchase. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean; // Default: true\n\n  /** The level of commitment desired when querying the blockchain. */\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchaseByTradeStateOperationHandler: OperationHandler<FindPurchaseByTradeStateOperation> =\n  {\n    handle: async (\n      operation: FindPurchaseByTradeStateOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const { sellerTradeState, buyerTradeState } = operation.input;\n\n      const receiptAddress = findPurchaseReceiptPda(\n        sellerTradeState,\n        buyerTradeState\n      );\n\n      return metaplex\n        .auctionHouse()\n        .findPurchaseByReceipt({ receiptAddress, ...operation.input })\n        .run(scope);\n    },\n  };\n"],"names":["Key","findPurchaseByTradeStateOperation","useOperation","findPurchaseByTradeStateOperationHandler","handle","operation","metaplex","scope","sellerTradeState","buyerTradeState","input","receiptAddress","findPurchaseReceiptPda","auctionHouse","findPurchaseByReceipt","run"],"mappings":";;;;;;;AAQA;AACA;;AAEA,MAAMA,GAAG,GAAG,mCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,iCAAiC,GAC5CC,sBAAY,CAAoCF,GAApC,EADP;AAGP;AACA;AACA;AACA;;AAgCA;AACA;AACA;AACA;AACO,MAAMG,wCAA6F,GACxG;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,gBAAF;AAAoBC,MAAAA,eAAAA;KAAoBJ,GAAAA,SAAS,CAACK,KAAxD,CAAA;AAEA,IAAA,MAAMC,cAAc,GAAGC,2BAAsB,CAC3CJ,gBAD2C,EAE3CC,eAF2C,CAA7C,CAAA;AAKA,IAAA,OAAOH,QAAQ,CACZO,YADI,EAAA,CAEJC,qBAFI,CAEkB;MAAEH,cAAF;AAAkB,MAAA,GAAGN,SAAS,CAACK,KAAAA;AAA/B,KAFlB,CAGJK,CAAAA,GAHI,CAGAR,KAHA,CAAP,CAAA;AAID,GAAA;AAjBH;;;;;"}