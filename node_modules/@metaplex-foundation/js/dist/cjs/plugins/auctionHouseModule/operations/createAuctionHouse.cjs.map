{"version":3,"file":"createAuctionHouse.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/createAuctionHouse.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport {\n  AuthorityScope,\n  createCreateAuctionHouseInstruction,\n  createDelegateAuctioneerInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  useOperation,\n  Operation,\n  Signer,\n  OperationHandler,\n  Pda,\n  isSigner,\n  toPublicKey,\n} from '@/types';\nimport { DisposableScope, TransactionBuilder } from '@/utils';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport {\n  findAuctioneerPda,\n  findAuctionHouseFeePda,\n  findAuctionHousePda,\n  findAuctionHouseTreasuryPda,\n} from '../pdas';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { WRAPPED_SOL_MINT } from '../../tokenModule';\nimport { AUCTIONEER_ALL_SCOPES } from '../constants';\nimport { ExpectedSignerError } from '@/errors';\nimport { AuctionHouse } from '../models/AuctionHouse';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAuctionHouseOperation' as const;\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500 }) // 5% fee\n *   .run();\n * ```\n *\n * Provide `auctioneerAuthority` in case you want to enable Auctioneer.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500, auctioneerAuthority: mx.identity().publicKey })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createAuctionHouseOperation =\n  useOperation<CreateAuctionHouseOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateAuctionHouseOperation = Operation<\n  typeof Key,\n  CreateAuctionHouseInput,\n  CreateAuctionHouseOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateAuctionHouseInput = {\n  /** The share of the sale the auction house takes on all NFTs as a fee. */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * This allows the centralised authority to gate which NFT can be listed, bought and sold.\n   *\n   * @defaultValue `canChangeSalePrice`\n   */\n  requiresSignOff?: boolean;\n\n  /**\n   * Is intended to be used with the Auction House that requires sign off.\n   * If the seller intentionally lists their NFT for a price of 0, a new FreeSellerTradeState is made.\n   * The Auction House can then change the price to match a matching Bid that is greater than 0.\n   *\n   * @defaultValue `false`\n   */\n  canChangeSalePrice?: boolean;\n\n  /**\n   * The list of scopes available to the user in the Auctioneer.\n   * For example Bid, List, Execute Sale.\n   *\n   * Only takes place when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue `All scopes available`\n   */\n  auctioneerScopes?: AuthorityScope[];\n\n  /**\n   * The address of the Auction House treasury mint.\n   * The token you accept as the purchase currency.\n   *\n   * @defaultValue `WRAPPED_SOL_MINT`\n   */\n  treasuryMint?: PublicKey;\n\n  /**\n   * The Signer paying for the creation of all accounts\n   * required to create the Auction House.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /**\n   * The Authority wallet of the Auction House.\n   * It is used to sign off listings and bids in case `requiresSignOff` is true.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The account that is marked as a destination of withdrawal from the fee account.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  feeWithdrawalDestination?: PublicKey;\n\n  /**\n   * The account that is marked as the owner of treasury withdrawal destination.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  treasuryWithdrawalDestinationOwner?: PublicKey;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House is going to have Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: PublicKey;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateAuctionHouseOutput = {\n  /** The address of the Auction House. */\n  auctionHouseAddress: Pda;\n\n  /** The account that used to pay the fees for selling and buying. */\n  auctionHouseFeeAccountAddress: Pda;\n\n  /** The account that receives the AuctionHouse fees. */\n  auctionHouseTreasuryAddress: Pda;\n\n  /** The account that is marked as a destination of withdrawal from the treasury account. */\n  treasuryWithdrawalDestinationAddress: PublicKey;\n\n  /** Auction House model. */\n  auctionHouse: AuctionHouse;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createAuctionHouseOperationHandler: OperationHandler<CreateAuctionHouseOperation> =\n  {\n    async handle(\n      operation: CreateAuctionHouseOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateAuctionHouseOutput> {\n      const output = await createAuctionHouseBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n      scope.throwIfCanceled();\n      const auctionHouse = await metaplex\n        .auctionHouse()\n        .findByAddress({\n          address: output.auctionHouseAddress,\n          auctioneerAuthority: operation.input.auctioneerAuthority,\n        })\n        .run(scope);\n      return { ...output, auctionHouse };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateAuctionHouseBuilderParams = Omit<\n  CreateAuctionHouseInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n  delegateAuctioneerInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateAuctionHouseBuilderContext = Omit<\n  CreateAuctionHouseOutput,\n  'response' | 'auctionHouse'\n>;\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createAuctionHouse({ sellerFeeBasisPoints: 500 }) // 5% fee\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createAuctionHouseBuilder = (\n  metaplex: Metaplex,\n  params: CreateAuctionHouseBuilderParams\n): TransactionBuilder<CreateAuctionHouseBuilderContext> => {\n  // Data.\n  const canChangeSalePrice = params.canChangeSalePrice ?? false;\n  const requiresSignOff = params.requiresSignOff ?? canChangeSalePrice;\n\n  // Accounts.\n  const authority = params.authority ?? metaplex.identity();\n  const payer = params.payer ?? metaplex.identity();\n  const treasuryMint = params.treasuryMint ?? WRAPPED_SOL_MINT;\n  const treasuryWithdrawalDestinationOwner =\n    params.treasuryWithdrawalDestinationOwner ?? metaplex.identity().publicKey;\n  const feeWithdrawalDestination =\n    params.feeWithdrawalDestination ?? metaplex.identity().publicKey;\n\n  // Auctioneer delegate instruction needs to be signed by authority\n  if (params.auctioneerAuthority && !isSigner(authority)) {\n    throw new ExpectedSignerError('authority', 'PublicKey', {\n      problemSuffix:\n        'You are trying to delegate to an Auctioneer authority which ' +\n        'requires the Auction House authority to sign a transaction. ' +\n        'But you provided the Auction House authority as a Public Key.',\n    });\n  }\n\n  // PDAs.\n  const auctionHouse = findAuctionHousePda(\n    toPublicKey(authority),\n    treasuryMint\n  );\n  const auctionHouseFeeAccount = findAuctionHouseFeePda(auctionHouse);\n  const auctionHouseTreasury = findAuctionHouseTreasuryPda(auctionHouse);\n  const treasuryWithdrawalDestination = treasuryMint.equals(WRAPPED_SOL_MINT)\n    ? treasuryWithdrawalDestinationOwner\n    : findAssociatedTokenAccountPda(\n        treasuryMint,\n        treasuryWithdrawalDestinationOwner\n      );\n\n  return (\n    TransactionBuilder.make<CreateAuctionHouseBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        auctionHouseAddress: auctionHouse,\n        auctionHouseFeeAccountAddress: auctionHouseFeeAccount,\n        auctionHouseTreasuryAddress: auctionHouseTreasury,\n        treasuryWithdrawalDestinationAddress: treasuryWithdrawalDestination,\n      })\n\n      // Create and initialize the Auction House account.\n      .add({\n        instruction: createCreateAuctionHouseInstruction(\n          {\n            treasuryMint,\n            payer: payer.publicKey,\n            authority: toPublicKey(authority),\n            feeWithdrawalDestination,\n            treasuryWithdrawalDestination,\n            treasuryWithdrawalDestinationOwner,\n            auctionHouse,\n            auctionHouseFeeAccount,\n            auctionHouseTreasury,\n          },\n          {\n            bump: auctionHouse.bump,\n            feePayerBump: auctionHouseFeeAccount.bump,\n            treasuryBump: auctionHouseTreasury.bump,\n            sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n            requiresSignOff,\n            canChangeSalePrice,\n          }\n        ),\n        signers: [payer],\n        key: params.instructionKey ?? 'createAuctionHouse',\n      })\n\n      // Delegate to the Auctioneer authority when provided.\n      .when(Boolean(params.auctioneerAuthority), (builder) => {\n        const auctioneerAuthority = params.auctioneerAuthority as PublicKey;\n        return builder.add({\n          instruction: createDelegateAuctioneerInstruction(\n            {\n              auctionHouse,\n              authority: toPublicKey(authority as Signer),\n              auctioneerAuthority,\n              ahAuctioneerPda: findAuctioneerPda(\n                auctionHouse,\n                auctioneerAuthority\n              ),\n            },\n            { scopes: params.auctioneerScopes ?? AUCTIONEER_ALL_SCOPES }\n          ),\n          signers: [authority as Signer],\n          key: params.delegateAuctioneerInstructionKey ?? 'delegateAuctioneer',\n        });\n      })\n  );\n};\n"],"names":["Key","createAuctionHouseOperation","useOperation","createAuctionHouseOperationHandler","handle","operation","metaplex","scope","output","createAuctionHouseBuilder","input","sendAndConfirm","confirmOptions","throwIfCanceled","auctionHouse","findByAddress","address","auctionHouseAddress","auctioneerAuthority","run","params","canChangeSalePrice","requiresSignOff","authority","identity","payer","treasuryMint","WRAPPED_SOL_MINT","treasuryWithdrawalDestinationOwner","publicKey","feeWithdrawalDestination","isSigner","ExpectedSignerError","problemSuffix","findAuctionHousePda","toPublicKey","auctionHouseFeeAccount","findAuctionHouseFeePda","auctionHouseTreasury","findAuctionHouseTreasuryPda","treasuryWithdrawalDestination","equals","findAssociatedTokenAccountPda","TransactionBuilder","make","setFeePayer","setContext","auctionHouseFeeAccountAddress","auctionHouseTreasuryAddress","treasuryWithdrawalDestinationAddress","add","instruction","createCreateAuctionHouseInstruction","bump","feePayerBump","treasuryBump","sellerFeeBasisPoints","signers","key","instructionKey","when","Boolean","builder","createDelegateAuctioneerInstruction","ahAuctioneerPda","findAuctioneerPda","scopes","auctioneerScopes","AUCTIONEER_ALL_SCOPES","delegateAuctioneerInstructionKey"],"mappings":"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"}