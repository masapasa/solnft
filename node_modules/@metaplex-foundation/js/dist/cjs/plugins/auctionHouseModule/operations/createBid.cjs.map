{"version":3,"file":"createBid.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/createBid.ts"],"sourcesContent":["import {\n  ConfirmOptions,\n  PublicKey,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder, Option, DisposableScope } from '@/utils';\nimport {\n  BuyInstructionAccounts,\n  createAuctioneerBuyInstruction,\n  createAuctioneerPublicBuyInstruction,\n  createBuyInstruction,\n  createPrintBidReceiptInstruction,\n  createPublicBuyInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  token,\n  lamports,\n  isSigner,\n  amount,\n  SolAmount,\n  SplTokenAmount,\n  Pda,\n  now,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../../tokenModule';\nimport { findMetadataPda } from '../../nftModule';\nimport { AuctionHouse, Bid, LazyBid } from '../models';\nimport {\n  findAuctioneerPda,\n  findAuctionHouseBuyerEscrowPda,\n  findAuctionHouseTradeStatePda,\n  findBidReceiptPda,\n} from '../pdas';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateBidOperation' as const;\n\n/**\n * Creates a bid on a given asset.\n *\n * You can post a public bid on a non-listed NFT by skipping seller and tokenAccount properties.\n * Public bids are specific to the token itself and not to any specific auction.\n * This means that a bid can stay active beyond the end of an auction\n * and be resolved if it meets the criteria for subsequent auctions of that token.\n *\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .createBid({ auctionHouse, mintAccount, seller })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createBidOperation = useOperation<CreateBidOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateBidOperation = Operation<\n  typeof Key,\n  CreateBidInput,\n  CreateBidOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateBidInput = {\n  /** The Auction House in which to create a Bid. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Creator of a bid.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: Signer;\n\n  /**\n   * The Auction House authority.\n   * If this is Signer the transaction fee\n   * will be paid from the Auction House Fee Account\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The mint account to create a bid for.\n   * This is used to find the metadata.\n   */\n  mintAccount: PublicKey;\n\n  /**\n   * The account address that holds the asset a bid created is for.\n   * If this or tokenAccount isn't provided, then the bid will be public.\n   *\n   * @defaultValue No default value.\n   */\n  seller?: Option<PublicKey>;\n\n  /**\n   * The token account address that's associated to the asset a bid created is for.\n   * If this or seller isn't provided, then the bid will be public.\n   *\n   * @defaultValue No default value.\n   */\n  tokenAccount?: Option<PublicKey>;\n\n  /**\n   * The buyer's price.\n   *\n   * @defaultValue 0 SOLs or tokens.\n   */\n  price?: SolAmount | SplTokenAmount; // Default: 0 SOLs or tokens.\n\n  /**\n   * The number of tokens to bid for.\n   * For an NFT bid it must be 1 token.\n   *\n   * When a Fungible Asset is put on sale.\n   * The buyer can then create a buy order of said assets that is\n   * less than the token_size of the sell order.\n   *\n   * @defaultValue 1 token.\n   */\n  tokens?: SplTokenAmount;\n\n  /**\n   * Prints the bid receipt.\n   * The receipt holds information about the bid,\n   * So it's important to print it if you want to use the `Bid` model\n   *\n   * The receipt printing is skipped for the Auctioneer Auction House\n   * Since it currently doesn't support it.\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateBidOutput = {\n  /** Buyer trade state account PDA encoding the bid order. */\n  buyerTradeState: Pda;\n\n  /** The asset's token account address in case the bid is private. */\n  tokenAccount: Option<PublicKey>;\n\n  /** The asset's metadata PDA. */\n  metadata: Pda;\n\n  /** The potential buyer of the asset. */\n  buyer: PublicKey;\n\n  /** The PDA of the receipt account in case it was printed. */\n  receipt: Option<Pda>;\n\n  /** The address of the bookkeeper wallet responsible for the receipt. */\n  bookkeeper: Option<PublicKey>;\n\n  /** The buyer's price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens to bid for. */\n  tokens: SplTokenAmount;\n\n  /** A model that keeps information about the Bid. */\n  bid: Bid;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createBidOperationHandler: OperationHandler<CreateBidOperation> = {\n  async handle(\n    operation: CreateBidOperation,\n    metaplex: Metaplex,\n    scope: DisposableScope\n  ): Promise<CreateBidOutput> {\n    const { auctionHouse, confirmOptions } = operation.input;\n\n    const builder = await createBidBuilder(metaplex, operation.input);\n    const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n    scope.throwIfCanceled();\n\n    if (output.receipt) {\n      const bid = await metaplex\n        .auctionHouse()\n        .findBidByReceipt({\n          auctionHouse,\n          receiptAddress: output.receipt,\n        })\n        .run(scope);\n\n      return { bid, ...output };\n    }\n\n    scope.throwIfCanceled();\n    const lazyBid: LazyBid = {\n      model: 'bid',\n      lazy: true,\n      auctionHouse,\n      tradeStateAddress: output.buyerTradeState,\n      bookkeeperAddress: output.bookkeeper,\n      tokenAddress: output.tokenAccount,\n      buyerAddress: output.buyer,\n      metadataAddress: output.metadata,\n      receiptAddress: output.receipt,\n      purchaseReceiptAddress: null,\n      isPublic: Boolean(output.tokenAccount),\n      price: output.price,\n      tokens: output.tokens.basisPoints,\n      createdAt: now(),\n      canceledAt: null,\n    };\n\n    return {\n      bid: await metaplex.auctionHouse().loadBid({ lazyBid }).run(scope),\n      ...output,\n    };\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateBidBuilderParams = Omit<CreateBidInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateBidBuilderContext = Omit<CreateBidOutput, 'response' | 'bid'>;\n\n/**\n * Creates a bid on a given asset.\n *\n * You can post a public bid on a non-listed NFT by skipping seller and tokenAccount properties.\n * Public bids are specific to the token itself and not to any specific auction.\n * This means that a bid can stay active beyond the end of an auction\n * and be resolved if it meets the criteria for subsequent auctions of that token.\n *\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createBid({ auctionHouse, mintAccount, seller })\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createBidBuilder = async (\n  metaplex: Metaplex,\n  params: CreateBidBuilderParams\n): Promise<TransactionBuilder<CreateBidBuilderContext>> => {\n  // Data.\n  const auctionHouse = params.auctionHouse;\n  const tokens = params.tokens ?? token(1);\n  const priceBasisPoint = params.price?.basisPoints ?? 0;\n  const price = auctionHouse.isNative\n    ? lamports(priceBasisPoint)\n    : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);\n\n  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const buyer = params.buyer ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n  const metadata = findMetadataPda(params.mintAccount);\n  const paymentAccount = auctionHouse.isNative\n    ? toPublicKey(buyer)\n    : findAssociatedTokenAccountPda(\n        auctionHouse.treasuryMint.address,\n        toPublicKey(buyer)\n      );\n  const escrowPayment = findAuctionHouseBuyerEscrowPda(\n    auctionHouse.address,\n    toPublicKey(buyer)\n  );\n  const tokenAccount =\n    params.tokenAccount ??\n    (params.seller\n      ? findAssociatedTokenAccountPda(params.mintAccount, params.seller)\n      : null);\n  const buyerTokenAccount = findAssociatedTokenAccountPda(\n    params.mintAccount,\n    toPublicKey(buyer)\n  );\n\n  const buyerTradeState = findAuctionHouseTradeStatePda(\n    auctionHouse.address,\n    toPublicKey(buyer),\n    auctionHouse.treasuryMint.address,\n    params.mintAccount,\n    price.basisPoints,\n    tokens.basisPoints,\n    tokenAccount\n  );\n\n  const accounts: Omit<BuyInstructionAccounts, 'tokenAccount'> = {\n    wallet: toPublicKey(buyer),\n    paymentAccount,\n    transferAuthority: toPublicKey(buyer),\n    treasuryMint: auctionHouse.treasuryMint.address,\n    metadata,\n    escrowPaymentAccount: escrowPayment,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    buyerTradeState,\n  };\n\n  // Args.\n  const args = {\n    tradeStateBump: buyerTradeState.bump,\n    escrowPaymentBump: escrowPayment.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Sell Instruction.\n  let buyInstruction;\n  if (params.auctioneerAuthority) {\n    const ahAuctioneerPda = findAuctioneerPda(\n      auctionHouse.address,\n      params.auctioneerAuthority.publicKey\n    );\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: params.auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    buyInstruction = tokenAccount\n      ? createAuctioneerBuyInstruction(\n          { ...accountsWithAuctioneer, tokenAccount },\n          args\n        )\n      : createAuctioneerPublicBuyInstruction(\n          {\n            ...accountsWithAuctioneer,\n            tokenAccount: buyerTokenAccount,\n          },\n          args\n        );\n  } else {\n    buyInstruction = tokenAccount\n      ? createBuyInstruction({ ...accounts, tokenAccount }, args)\n      : createPublicBuyInstruction(\n          { ...accounts, tokenAccount: buyerTokenAccount },\n          args\n        );\n  }\n\n  // Signers.\n  const buySigners = [buyer, authority, params.auctioneerAuthority].filter(\n    isSigner\n  );\n\n  // Receipt.\n  // Since createPrintBidReceiptInstruction can't deserialize createAuctioneerBuyInstruction due to a bug\n  // Don't print Auctioneer Bid receipt for the time being.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) && !params.auctioneerAuthority;\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const receipt = findBidReceiptPda(buyerTradeState);\n\n  const builder = TransactionBuilder.make<CreateBidBuilderContext>().setContext(\n    {\n      buyerTradeState,\n      tokenAccount,\n      metadata,\n      buyer: toPublicKey(buyer),\n      receipt: shouldPrintReceipt ? receipt : null,\n      bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n      price,\n      tokens,\n    }\n  );\n\n  // Create a TA for public bid if it doesn't exist\n  if (!tokenAccount) {\n    const account = await metaplex.rpc().getAccount(buyerTokenAccount);\n    if (!account.exists) {\n      builder.add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createToken({\n            mint: params.mintAccount,\n            owner: toPublicKey(buyer),\n          })\n      );\n    }\n  }\n\n  return (\n    builder\n      // Create bid.\n      .add({\n        instruction: buyInstruction,\n        signers: buySigners,\n        key: 'buy',\n      })\n\n      // Print the Bid Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintBidReceiptInstruction(\n            {\n              receipt,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { receiptBump: receipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printBidReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","createBidOperation","useOperation","createBidOperationHandler","handle","operation","metaplex","scope","auctionHouse","confirmOptions","input","builder","createBidBuilder","output","sendAndConfirm","throwIfCanceled","receipt","bid","findBidByReceipt","receiptAddress","run","lazyBid","model","lazy","tradeStateAddress","buyerTradeState","bookkeeperAddress","bookkeeper","tokenAddress","tokenAccount","buyerAddress","buyer","metadataAddress","metadata","purchaseReceiptAddress","isPublic","Boolean","price","tokens","basisPoints","createdAt","now","canceledAt","loadBid","params","token","priceBasisPoint","isNative","lamports","amount","treasuryMint","currency","hasAuctioneer","auctioneerAuthority","AuctioneerAuthorityRequiredError","identity","authority","authorityAddress","findMetadataPda","mintAccount","paymentAccount","toPublicKey","findAssociatedTokenAccountPda","address","escrowPayment","findAuctionHouseBuyerEscrowPda","seller","buyerTokenAccount","findAuctionHouseTradeStatePda","accounts","wallet","transferAuthority","escrowPaymentAccount","auctionHouseFeeAccount","feeAccountAddress","args","tradeStateBump","bump","escrowPaymentBump","buyerPrice","tokenSize","buyInstruction","ahAuctioneerPda","findAuctioneerPda","publicKey","accountsWithAuctioneer","createAuctioneerBuyInstruction","createAuctioneerPublicBuyInstruction","createBuyInstruction","createPublicBuyInstruction","buySigners","filter","isSigner","shouldPrintReceipt","printReceipt","findBidReceiptPda","TransactionBuilder","make","setContext","account","rpc","getAccount","exists","add","builders","createToken","mint","owner","instruction","signers","key","when","createPrintBidReceiptInstruction","SYSVAR_INSTRUCTIONS_PUBKEY","receiptBump"],"mappings":"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"}