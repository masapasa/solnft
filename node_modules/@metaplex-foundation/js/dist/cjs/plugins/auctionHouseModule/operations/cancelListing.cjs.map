{"version":3,"file":"cancelListing.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/cancelListing.ts"],"sourcesContent":["import { ConfirmOptions, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  CancelInstructionAccounts,\n  createCancelListingReceiptInstruction,\n  createCancelInstruction,\n  createAuctioneerCancelInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  isSigner,\n  Pda,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctionHouse, Listing } from '../models';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { findAuctioneerPda } from '../pdas';\nimport { AUCTIONEER_PRICE } from '../constants';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelListingOperation' as const;\n\n/**\n * Cancels the user's listing in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelListing({ auctionHouse, listing })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const cancelListingOperation = useOperation<CancelListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelListingOperation = Operation<\n  typeof Key,\n  CancelListingInput,\n  CancelListingOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelListingInput = {\n  /** The Auction House in which to cancel Bid. */\n  auctionHouse: Pick<\n    AuctionHouse,\n    'address' | 'authorityAddress' | 'feeAccountAddress' | 'hasAuctioneer'\n  >;\n\n  /**\n   * The Listing to cancel.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to cancel it.\n   *\n   * This includes, its asset, seller address, price, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'price'\n    | 'receiptAddress'\n    | 'sellerAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelListingOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelListingOperationHandler: OperationHandler<CancelListingOperation> =\n  {\n    handle: async (operation: CancelListingOperation, metaplex: Metaplex) =>\n      cancelListingBuilder(operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      ),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelListingBuilderParams = Omit<\n  CancelListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelListingBuilderContext = Omit<CancelListingOutput, 'response'>;\n\n/**\n * Cancels the user's listing in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelListing({ auctionHouse, listing });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelListingBuilder = (\n  params: CancelListingBuilderParams\n): TransactionBuilder<CancelListingBuilderContext> => {\n  const { auctionHouse, auctioneerAuthority, listing } = params;\n\n  // Data.\n  const {\n    asset,\n    sellerAddress,\n    receiptAddress,\n    tradeStateAddress,\n    price,\n    tokens,\n  } = listing;\n  const {\n    address: auctionHouseAddress,\n    authorityAddress,\n    feeAccountAddress,\n    hasAuctioneer,\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const buyerPrice = hasAuctioneer ? AUCTIONEER_PRICE : price.basisPoints;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Listing Instruction.\n  let cancelListingInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelListingInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: findAuctioneerPda(\n          auctionHouseAddress,\n          auctioneerAuthority.publicKey\n        ),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n\n      // Cancel Listing.\n      .add({\n        instruction: cancelListingInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelListing',\n      })\n\n      // Cancel Listing Receipt.\n      .when(Boolean(receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelListingReceiptInstruction({\n            receipt: receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelListingReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","cancelListingOperation","useOperation","cancelListingOperationHandler","handle","operation","metaplex","cancelListingBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","auctioneerAuthority","listing","asset","sellerAddress","receiptAddress","tradeStateAddress","price","tokens","address","auctionHouseAddress","authorityAddress","feeAccountAddress","hasAuctioneer","AuctioneerAuthorityRequiredError","buyerPrice","AUCTIONEER_PRICE","basisPoints","accounts","wallet","tokenAccount","token","tokenMint","authority","auctionHouseFeeAccount","tradeState","args","tokenSize","cancelListingInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","findAuctioneerPda","cancelSigners","filter","isSigner","TransactionBuilder","make","add","instruction","signers","key","instructionKey","when","Boolean","builder","createCancelListingReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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"}