{"version":3,"file":"withdrawFromBuyerAccount.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromBuyerAccount.ts"],"sourcesContent":["import { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { TransactionBuilder } from '@/utils';\nimport {\n  WithdrawInstructionAccounts,\n  createWithdrawInstruction,\n  createAuctioneerWithdrawInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport {\n  useOperation,\n  Operation,\n  OperationHandler,\n  Signer,\n  isSigner,\n  toPublicKey,\n  SplTokenAmount,\n  SolAmount,\n} from '@/types';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctionHouse } from '../models';\nimport { findAuctioneerPda, findAuctionHouseBuyerEscrowPda } from '../pdas';\nimport {\n  AuctioneerAuthorityRequiredError,\n  WithdrawFromBuyerAccountRequiresSignerError,\n} from '../errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromBuyerAccountOperation' as const;\n\n/**\n * Withdraws funds from the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdraw({ auctionHouse, buyer, amount })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromBuyerAccountOperation =\n  useOperation<WithdrawFromBuyerAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromBuyerAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromBuyerAccountInput,\n  WithdrawFromBuyerAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WithdrawFromBuyerAccountInput = {\n  /** The Auction House from which escrow buyer withdraws funds. */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'hasAuctioneer'\n    | 'treasuryMint'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The buyer who withdraws funds.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: PublicKey | Signer;\n\n  /**\n   * The Signer paying for the creation of all accounts\n   * required to deposit to the buyer's account.\n   * This account will also pay for the transaction fee.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /**\n   * The Authority key.\n   * It is required when the buyer is not a signer.\n   * There must be one and only one signer; Authority or Buyer must sign.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  authority?: Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromBuyerAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromBuyerAccountOperationHandler: OperationHandler<WithdrawFromBuyerAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromBuyerAccountOperation,\n      metaplex: Metaplex\n    ) =>\n      withdrawFromBuyerAccountBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      ),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromBuyerAccountBuilderParams = Omit<\n  WithdrawFromBuyerAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromBuyerAccountBuilderContext = Omit<\n  WithdrawFromBuyerAccountOutput,\n  'response'\n>;\n\n/**\n * Withdraws funds from the user's buyer escrow account to the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromBuyerAccountBuilder({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromBuyerAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromBuyerAccountBuilderParams\n): TransactionBuilder<WithdrawFromBuyerAccountBuilderContext> => {\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    amount,\n    payer = metaplex.identity(),\n  } = params;\n\n  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const amountBasisPoint = amount.basisPoints;\n  const buyer = params.buyer ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n\n  if (!isSigner(buyer) && !isSigner(authority)) {\n    throw new WithdrawFromBuyerAccountRequiresSignerError();\n  }\n\n  const escrowPayment = findAuctionHouseBuyerEscrowPda(\n    auctionHouse.address,\n    toPublicKey(buyer)\n  );\n\n  // Accounts,\n  const accounts: WithdrawInstructionAccounts = {\n    wallet: toPublicKey(buyer),\n    receiptAccount: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Args.\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amountBasisPoint,\n  };\n\n  // Withdraw Instruction.\n  let withdrawInstruction = createWithdrawInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = findAuctioneerPda(\n      auctionHouse.address,\n      auctioneerAuthority.publicKey\n    );\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    withdrawInstruction = createAuctioneerWithdrawInstruction(\n      accountsWithAuctioneer,\n      args\n    );\n  }\n\n  // Signers.\n  const signer = isSigner(buyer) ? buyer : (authority as Signer);\n  const withdrawSigners = [signer, params.auctioneerAuthority].filter(isSigner);\n\n  // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.\n  const signerKeyIndex = withdrawInstruction.keys.findIndex((key) =>\n    key.pubkey.equals(signer.publicKey)\n  );\n  withdrawInstruction.keys[signerKeyIndex].isSigner = true;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n      // Withdraw.\n      .add({\n        instruction: withdrawInstruction,\n        signers: withdrawSigners,\n        key: params.instructionKey ?? 'withdrawFromBuyerAccount',\n      })\n  );\n};\n"],"names":["Key","withdrawFromBuyerAccountOperation","useOperation","withdrawFromBuyerAccountOperationHandler","handle","operation","metaplex","withdrawFromBuyerAccountBuilder","input","sendAndConfirm","confirmOptions","params","auctionHouse","auctioneerAuthority","amount","payer","identity","hasAuctioneer","AuctioneerAuthorityRequiredError","amountBasisPoint","basisPoints","buyer","authority","authorityAddress","isSigner","WithdrawFromBuyerAccountRequiresSignerError","escrowPayment","findAuctionHouseBuyerEscrowPda","address","toPublicKey","accounts","wallet","receiptAccount","escrowPaymentAccount","treasuryMint","auctionHouseFeeAccount","feeAccountAddress","args","escrowPaymentBump","bump","withdrawInstruction","createWithdrawInstruction","ahAuctioneerPda","findAuctioneerPda","publicKey","accountsWithAuctioneer","createAuctioneerWithdrawInstruction","signer","withdrawSigners","filter","signerKeyIndex","keys","findIndex","key","pubkey","equals","TransactionBuilder","make","setFeePayer","add","instruction","signers","instructionKey"],"mappings":"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"}