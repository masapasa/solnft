{"version":3,"file":"findListingByReceipt.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findListingByReceipt.ts"],"sourcesContent":["import type { Commitment, PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { useOperation, Operation, OperationHandler } from '@/types';\nimport { toListingReceiptAccount } from '../accounts';\nimport { AuctionHouse, Listing, toLazyListing } from '../models';\nimport { DisposableScope } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindListingByReceiptOperation' as const;\n\n/**\n * Finds a Listing by its receipt address.\n *\n * ```ts\n * const nft = await metaplex\n *   .auctionHouse()\n *   .findListingByReceipt({ receiptAddress, auctionHouse })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findListingByReceiptOperation =\n  useOperation<FindListingByReceiptOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindListingByReceiptOperation = Operation<\n  typeof Key,\n  FindListingByReceiptInput,\n  Listing\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindListingByReceiptInput = {\n  /**\n   * The address of the listing receipt account.\n   * This is the account that stores information about this listing.\n   * The Listing model is built on top of this account.\n   */\n  receiptAddress: PublicKey;\n\n  /** A model of the Auction House related to this listing. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n\n  /** The level of commitment desired when querying the blockchain. */\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findListingByReceiptOperationHandler: OperationHandler<FindListingByReceiptOperation> =\n  {\n    handle: async (\n      operation: FindListingByReceiptOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ) => {\n      const { receiptAddress, auctionHouse, commitment } = operation.input;\n\n      const account = toListingReceiptAccount(\n        await metaplex.rpc().getAccount(receiptAddress, commitment)\n      );\n      scope.throwIfCanceled();\n\n      const lazyListing = toLazyListing(account, auctionHouse);\n      return metaplex\n        .auctionHouse()\n        .loadListing({ lazyListing, ...operation.input })\n        .run(scope);\n    },\n  };\n"],"names":["Key","findListingByReceiptOperation","useOperation","findListingByReceiptOperationHandler","handle","operation","metaplex","scope","receiptAddress","auctionHouse","commitment","input","account","toListingReceiptAccount","rpc","getAccount","throwIfCanceled","lazyListing","toLazyListing","loadListing","run"],"mappings":";;;;;;;;AAOA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,+BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,6BAA6B,GACxCC,sBAAY,CAAgCF,GAAhC,EADP;AAGP;AACA;AACA;AACA;;AAiCA;AACA;AACA;AACA;AACO,MAAMG,oCAAqF,GAChG;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,cAAF;MAAkBC,YAAlB;AAAgCC,MAAAA,UAAAA;KAAeL,GAAAA,SAAS,CAACM,KAA/D,CAAA;AAEA,IAAA,MAAMC,OAAO,GAAGC,gCAAuB,CACrC,MAAMP,QAAQ,CAACQ,GAAT,EAAA,CAAeC,UAAf,CAA0BP,cAA1B,EAA0CE,UAA1C,CAD+B,CAAvC,CAAA;AAGAH,IAAAA,KAAK,CAACS,eAAN,EAAA,CAAA;AAEA,IAAA,MAAMC,WAAW,GAAGC,qBAAa,CAACN,OAAD,EAAUH,YAAV,CAAjC,CAAA;AACA,IAAA,OAAOH,QAAQ,CACZG,YADI,EAAA,CAEJU,WAFI,CAEQ;MAAEF,WAAF;AAAe,MAAA,GAAGZ,SAAS,CAACM,KAAAA;AAA5B,KAFR,CAGJS,CAAAA,GAHI,CAGAb,KAHA,CAAP,CAAA;AAID,GAAA;AAlBH;;;;;"}