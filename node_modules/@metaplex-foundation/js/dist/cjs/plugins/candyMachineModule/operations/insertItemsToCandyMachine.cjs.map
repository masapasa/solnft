{"version":3,"file":"insertItemsToCandyMachine.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/insertItemsToCandyMachine.ts"],"sourcesContent":["import { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Operation,\n  OperationHandler,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder } from '@/utils';\nimport { createAddConfigLinesInstruction } from '@metaplex-foundation/mpl-candy-machine';\nimport type { ConfirmOptions } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  assertAllConfigLineConstraints,\n  assertCanAdd,\n  assertNotFull,\n} from '../asserts';\nimport { CandyMachine, CandyMachineItem } from '../models/CandyMachine';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'InsertItemsToCandyMachineOperation' as const;\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .insertItems({\n *     candyMachine,\n *     items: [\n *       { name: 'My NFT #1', uri: 'https://example.com/nft1' },\n *       { name: 'My NFT #2', uri: 'https://example.com/nft2' },\n *       { name: 'My NFT #3', uri: 'https://example.com/nft3' },\n *     ],\n *   })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const insertItemsToCandyMachineOperation =\n  useOperation<InsertItemsToCandyMachineOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type InsertItemsToCandyMachineOperation = Operation<\n  typeof Key,\n  InsertItemsToCandyMachineInput,\n  InsertItemsToCandyMachineOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type InsertItemsToCandyMachineInput = {\n  /**\n   * The Candy Machine to insert items into.\n   *\n   * We only need a subset of the `CandyMachine` model.\n   * We need its address and the number of items loaded and to be loaded\n   * so we can check if the operation is valid.\n   */\n  candyMachine: Pick<\n    CandyMachine,\n    'itemsAvailable' | 'itemsLoaded' | 'address'\n  >;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The items to insert into the candy machine.\n   */\n  items: CandyMachineItem[];\n\n  /**\n   * The index we should use to insert the new items. This refers to the\n   * index of the first item to insert and the others will follow after it.\n   *\n   * By defaults, this uses the `itemsLoaded` property so items are simply\n   * appended to the current items.\n   *\n   * @defaultValue `candyMachine.itemsLoaded`\n   */\n  index?: BigNumber;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type InsertItemsToCandyMachineOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const InsertItemsToCandyMachineOperationHandler: OperationHandler<InsertItemsToCandyMachineOperation> =\n  {\n    async handle(\n      operation: InsertItemsToCandyMachineOperation,\n      metaplex: Metaplex\n    ): Promise<InsertItemsToCandyMachineOutput> {\n      return insertItemsToCandyMachineBuilder(\n        metaplex,\n        operation.input\n      ).sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type InsertItemsToCandyMachineBuilderParams = Omit<\n  InsertItemsToCandyMachineInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * Insert items into an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachines()\n *   .builders()\n *   .insertItems({ candyMachine, items });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const insertItemsToCandyMachineBuilder = (\n  metaplex: Metaplex,\n  params: InsertItemsToCandyMachineBuilderParams\n): TransactionBuilder => {\n  const authority = params.authority ?? metaplex.identity();\n  const index = params.index ?? params.candyMachine.itemsLoaded;\n  const items = params.items;\n  assertNotFull(params.candyMachine, index);\n  assertCanAdd(params.candyMachine, index, items.length);\n  assertAllConfigLineConstraints(items);\n\n  return TransactionBuilder.make().add({\n    instruction: createAddConfigLinesInstruction(\n      {\n        candyMachine: params.candyMachine.address,\n        authority: authority.publicKey,\n      },\n      { index: index.toNumber(), configLines: items }\n    ),\n    signers: [authority],\n    key: params.instructionKey ?? 'insertItems',\n  });\n};\n"],"names":["Key","insertItemsToCandyMachineOperation","useOperation","InsertItemsToCandyMachineOperationHandler","handle","operation","metaplex","insertItemsToCandyMachineBuilder","input","sendAndConfirm","confirmOptions","params","authority","identity","index","candyMachine","itemsLoaded","items","assertNotFull","assertCanAdd","length","assertAllConfigLineConstraints","TransactionBuilder","make","add","instruction","createAddConfigLinesInstruction","address","publicKey","toNumber","configLines","signers","key","instructionKey"],"mappings":";;;;;;;;;AAmBA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,oCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,kCAAkC,GAC7CC,sBAAY,CAAqCF,GAArC,EADP;AAGP;AACA;AACA;AACA;;AA4DA;AACA;AACA;AACA;AACO,MAAMG,yCAA+F,GAC1G;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAG4C;AAC1C,IAAA,OAAOC,gCAAgC,CACrCD,QADqC,EAErCD,SAAS,CAACG,KAF2B,CAAhC,CAGLC,cAHK,CAGUH,QAHV,EAGoBD,SAAS,CAACG,KAAV,CAAgBE,cAHpC,CAAP,CAAA;AAID,GAAA;;AATH;AAaF;AACA;;AAEA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaH,gCAAgC,GAAG,CAC9CD,QAD8C,EAE9CK,MAF8C,KAGvB;AAAA,EAAA,IAAA,iBAAA,EAAA,aAAA,EAAA,qBAAA,CAAA;;EACvB,MAAMC,SAAS,wBAAGD,MAAM,CAACC,SAAV,MAAuBN,IAAAA,IAAAA,iBAAAA,KAAAA,KAAAA,CAAAA,GAAAA,iBAAAA,GAAAA,QAAQ,CAACO,QAAT,EAAtC,CAAA;EACA,MAAMC,KAAK,GAAGH,CAAAA,aAAAA,GAAAA,MAAM,CAACG,KAAV,yDAAmBH,MAAM,CAACI,YAAP,CAAoBC,WAAlD,CAAA;AACA,EAAA,MAAMC,KAAK,GAAGN,MAAM,CAACM,KAArB,CAAA;AACAC,EAAAA,qBAAa,CAACP,MAAM,CAACI,YAAR,EAAsBD,KAAtB,CAAb,CAAA;EACAK,oBAAY,CAACR,MAAM,CAACI,YAAR,EAAsBD,KAAtB,EAA6BG,KAAK,CAACG,MAAnC,CAAZ,CAAA;EACAC,sCAA8B,CAACJ,KAAD,CAA9B,CAAA;AAEA,EAAA,OAAOK,qCAAkB,CAACC,IAAnB,EAAA,CAA0BC,GAA1B,CAA8B;IACnCC,WAAW,EAAEC,+CAA+B,CAC1C;AACEX,MAAAA,YAAY,EAAEJ,MAAM,CAACI,YAAP,CAAoBY,OADpC;MAEEf,SAAS,EAAEA,SAAS,CAACgB,SAAAA;AAFvB,KAD0C,EAK1C;AAAEd,MAAAA,KAAK,EAAEA,KAAK,CAACe,QAAN,EAAT;AAA2BC,MAAAA,WAAW,EAAEb,KAAAA;AAAxC,KAL0C,CADT;IAQnCc,OAAO,EAAE,CAACnB,SAAD,CAR0B;AASnCoB,IAAAA,GAAG,EAAErB,CAAAA,qBAAAA,GAAAA,MAAM,CAACsB,cAAT,MAA2B,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,qBAAA,GAAA,aAAA;AATK,GAA9B,CAAP,CAAA;AAWD;;;;;;"}