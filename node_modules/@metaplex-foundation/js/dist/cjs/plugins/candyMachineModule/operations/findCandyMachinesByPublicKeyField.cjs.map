{"version":3,"file":"findCandyMachinesByPublicKeyField.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/findCandyMachinesByPublicKeyField.ts"],"sourcesContent":["import { UnreachableCaseError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport { Mint, toMint, toMintAccount } from '@/plugins/tokenModule';\nimport { Operation, OperationHandler, useOperation } from '@/types';\nimport { DisposableScope, zipMap } from '@/utils';\nimport { Commitment, PublicKey } from '@solana/web3.js';\nimport {\n  CandyMachineAccount,\n  parseCandyMachineAccount,\n  parseCandyMachineCollectionAccount,\n} from '../accounts';\nimport { CandyMachineGpaBuilder } from '../gpaBuilders';\nimport { CandyMachine, toCandyMachine } from '../models/CandyMachine';\nimport { findCandyMachineCollectionPda } from '../pdas';\nimport { CandyMachineProgram } from '../program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachinesByPublicKeyOperation' as const;\n\n/**\n * Find all Candy Machines matching by a given `publicKey` or a given `type`.\n *\n * The following two types are supported.\n *\n * `authority`: Find Candy Machines whose authority is the given `publicKey`.\n * ```ts\n * const someAuthority = new PublicKey('...');\n * const candyMachines = await metaplex\n *   .candyMachines()\n *   .findAllBy({ type: 'authority', someAuthority });\n *   .run();\n * ```\n *\n * `wallet`: Find Candy Machines whose wallet address is the given `publicKey`.\n * ```ts\n * const someWallet = new PublicKey('...');\n * const candyMachines = await metaplex\n *   .candyMachines()\n *   .findAllBy({ type: 'wallet', someWallet });\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachinesByPublicKeyFieldOperation =\n  useOperation<FindCandyMachinesByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachinesByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindCandyMachinesByPublicKeyFieldInput,\n  CandyMachine[]\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachinesByPublicKeyFieldInput = {\n  /** Defines which type of account the `publicKey` field refers to.  */\n  type: 'authority' | 'wallet';\n\n  /** The publicKey to filter Candy Machine by. */\n  publicKey: PublicKey;\n\n  /** The level of commitment desired when querying the blockchain. */\n  commitment?: Commitment;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachinesByPublicKeyFieldOperationHandler: OperationHandler<FindCandyMachinesByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachinesByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CandyMachine[]> => {\n      const { type, publicKey, commitment } = operation.input;\n      const accounts = CandyMachineProgram.accounts(metaplex).mergeConfig({\n        commitment,\n      });\n\n      let candyMachineQuery: CandyMachineGpaBuilder;\n      switch (type) {\n        case 'authority':\n          candyMachineQuery =\n            accounts.candyMachineAccountsForAuthority(publicKey);\n          break;\n        case 'wallet':\n          candyMachineQuery = accounts.candyMachineAccountsForWallet(publicKey);\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n\n      const unparsedAccounts = await candyMachineQuery.get();\n      scope.throwIfCanceled();\n\n      const collectionPdas = unparsedAccounts.map((unparsedAccount) =>\n        findCandyMachineCollectionPda(unparsedAccount.publicKey)\n      );\n\n      // Find mint details for all unique SPL tokens used\n      // in candy machines that have non-null `tokenMint`\n\n      const parsedAccounts: Record<string, CandyMachineAccount> =\n        Object.fromEntries(\n          unparsedAccounts.map((unparsedAccount) => [\n            unparsedAccount.publicKey.toString(),\n            parseCandyMachineAccount(unparsedAccount),\n          ])\n        );\n\n      const tokenMints = [\n        ...new Set(\n          Object.values(parsedAccounts)\n            .map((account) => account.data.tokenMint?.toString())\n            .filter((tokenMint): tokenMint is string => tokenMint !== undefined)\n        ),\n      ].map((address) => new PublicKey(address));\n\n      const result = await metaplex\n        .rpc()\n        .getMultipleAccounts(tokenMints.concat(collectionPdas), commitment);\n      scope.throwIfCanceled();\n\n      const unparsedMintAccounts = result.slice(0, tokenMints.length);\n      const unparsedCollectionAccounts = result.slice(-collectionPdas.length);\n\n      const mints: Record<string, Mint> = Object.fromEntries(\n        unparsedMintAccounts.map((account) => [\n          account.publicKey.toString(),\n          toMint(toMintAccount(account)),\n        ])\n      );\n\n      return zipMap(\n        unparsedAccounts,\n        unparsedCollectionAccounts,\n        (unparsedAccount, unparsedCollectionAccount) => {\n          const parsedAccount =\n            parsedAccounts[unparsedAccount.publicKey.toString()];\n          const collectionAccount = unparsedCollectionAccount\n            ? parseCandyMachineCollectionAccount(unparsedCollectionAccount)\n            : null;\n          const tokenMintAddress = parsedAccount.data.tokenMint?.toString();\n\n          return toCandyMachine(\n            parsedAccount,\n            unparsedAccount,\n            collectionAccount,\n            tokenMintAddress ? mints[tokenMintAddress] : null\n          );\n        }\n      );\n    },\n  };\n"],"names":["Key","findCandyMachinesByPublicKeyFieldOperation","useOperation","findCandyMachinesByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","type","publicKey","commitment","input","accounts","CandyMachineProgram","mergeConfig","candyMachineQuery","candyMachineAccountsForAuthority","candyMachineAccountsForWallet","UnreachableCaseError","unparsedAccounts","get","throwIfCanceled","collectionPdas","map","unparsedAccount","findCandyMachineCollectionPda","parsedAccounts","Object","fromEntries","toString","parseCandyMachineAccount","tokenMints","Set","values","account","data","tokenMint","filter","undefined","address","PublicKey","result","rpc","getMultipleAccounts","concat","unparsedMintAccounts","slice","length","unparsedCollectionAccounts","mints","toMint","toMintAccount","zipMap","unparsedCollectionAccount","parsedAccount","collectionAccount","parseCandyMachineCollectionAccount","tokenMintAddress","toCandyMachine"],"mappings":"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"}