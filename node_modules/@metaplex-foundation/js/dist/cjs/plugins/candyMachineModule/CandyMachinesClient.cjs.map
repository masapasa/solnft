{"version":3,"file":"CandyMachinesClient.cjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachinesClient.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport { toPublicKey } from '@/types';\nimport { Task } from '@/utils';\nimport type { PublicKey } from '@solana/web3.js';\nimport { CandyMachinesBuildersClient } from './CandyMachinesBuildersClient';\nimport { CandyMachine } from './models';\nimport {\n  CreateCandyMachineInput,\n  createCandyMachineOperation,\n  DeleteCandyMachineInput,\n  deleteCandyMachineOperation,\n  FindCandyMachineByAddressInput,\n  findCandyMachineByAddressOperation,\n  FindCandyMachinesByPublicKeyFieldInput,\n  findCandyMachinesByPublicKeyFieldOperation,\n  FindMintedNftsByCandyMachineInput,\n  findMintedNftsByCandyMachineOperation,\n  InsertItemsToCandyMachineInput,\n  insertItemsToCandyMachineOperation,\n  MintCandyMachineInput,\n  mintCandyMachineOperation,\n  UpdateCandyMachineInput,\n  updateCandyMachineOperation,\n} from './operations';\n\n/**\n * This is a client for the Candy Machine module.\n *\n * It enables us to interact with the Candy Machine program in order to\n * create, update and delete Candy Machines as well as mint from them.\n *\n * You may access this client via the `candyMachines()` method of your `Metaplex` instance.\n *\n * ```ts\n * const candyMachineClient = metaplex.candyMachines();\n * ```\n *\n * @example\n * You can create a new Candy Machine with minimum input like so.\n * By default, the current identity of the Metaplex instance will be\n * the authority of the Candy Machine.\n *\n * ```ts\n * const { candyMachine } = await metaplex\n *   .candyMachines()\n *   .create({\n *     sellerFeeBasisPoints: 500, // 5% royalties\n *     price: sol(1.3), // 1.3 SOL\n *     itemsAvailable: toBigNumber(1000), // 1000 items available\n *   })\n *   .run();\n * ```\n *\n * @see {@link CandyMachine} The `CandyMachine` model\n * @group Modules\n */\nexport class CandyMachinesClient {\n  constructor(readonly metaplex: Metaplex) {}\n\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.candyMachines().builders();\n   * ```\n   */\n  builders() {\n    return new CandyMachinesBuildersClient(this.metaplex);\n  }\n\n  /** {@inheritDoc createCandyMachineOperation} */\n  create(input: CreateCandyMachineInput) {\n    return this.metaplex\n      .operations()\n      .getTask(createCandyMachineOperation(input));\n  }\n\n  /** {@inheritDoc deleteCandyMachineOperation} */\n  delete(input: DeleteCandyMachineInput) {\n    return this.metaplex\n      .operations()\n      .getTask(deleteCandyMachineOperation(input));\n  }\n\n  /** {@inheritDoc findCandyMachinesByPublicKeyFieldOperation} */\n  findAllBy(input: FindCandyMachinesByPublicKeyFieldInput) {\n    return this.metaplex\n      .operations()\n      .getTask(findCandyMachinesByPublicKeyFieldOperation(input));\n  }\n\n  /** {@inheritDoc findCandyMachineByAddressOperation} */\n  findByAddress(input: FindCandyMachineByAddressInput): Task<CandyMachine> {\n    return this.metaplex\n      .operations()\n      .getTask(findCandyMachineByAddressOperation(input));\n  }\n\n  /** {@inheritDoc findMintedNftsByCandyMachineOperation} */\n  findMintedNfts(input: FindMintedNftsByCandyMachineInput) {\n    return this.metaplex\n      .operations()\n      .getTask(findMintedNftsByCandyMachineOperation(input));\n  }\n\n  /** {@inheritDoc insertItemsToCandyMachineOperation} */\n  insertItems(input: InsertItemsToCandyMachineInput) {\n    return this.metaplex\n      .operations()\n      .getTask(insertItemsToCandyMachineOperation(input));\n  }\n\n  /** {@inheritDoc mintCandyMachineOperation} */\n  mint(input: MintCandyMachineInput) {\n    return this.metaplex.operations().getTask(mintCandyMachineOperation(input));\n  }\n\n  /**\n   * Helper method that refetches a given Candy Machine.\n   *\n   * ```ts\n   * const candyMachine = await metaplex.candyMachines().refresh(candyMachine).run();\n   * ```\n   */\n  refresh(\n    candyMachine: CandyMachine | PublicKey,\n    input?: Omit<FindCandyMachineByAddressInput, 'address'>\n  ): Task<CandyMachine> {\n    return this.findByAddress({ address: toPublicKey(candyMachine), ...input });\n  }\n\n  /** {@inheritDoc updateCandyMachineOperation} */\n  update(input: UpdateCandyMachineInput) {\n    return this.metaplex\n      .operations()\n      .getTask(updateCandyMachineOperation(input));\n  }\n}\n"],"names":["CandyMachinesClient","constructor","metaplex","builders","CandyMachinesBuildersClient","create","input","operations","getTask","createCandyMachineOperation","delete","deleteCandyMachineOperation","findAllBy","findCandyMachinesByPublicKeyFieldOperation","findByAddress","findCandyMachineByAddressOperation","findMintedNfts","findMintedNftsByCandyMachineOperation","insertItems","insertItemsToCandyMachineOperation","mint","mintCandyMachineOperation","refresh","candyMachine","address","toPublicKey","update","updateCandyMachineOperation"],"mappings":";;;;;;;;;;;;;;;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMA,mBAAN,CAA0B;EAC/BC,WAAW,CAAUC,QAAV,EAA8B;IAAA,IAApBA,CAAAA,QAAoB,GAApBA,QAAoB,CAAA;AAAE,GAAA;AAE3C;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,QAAQ,GAAG;AACT,IAAA,OAAO,IAAIC,uDAAJ,CAAgC,IAAA,CAAKF,QAArC,CAAP,CAAA;AACD,GAAA;AAED;;;EACAG,MAAM,CAACC,KAAD,EAAiC;IACrC,OAAO,IAAA,CAAKJ,QAAL,CACJK,UADI,EAAA,CAEJC,OAFI,CAEIC,8CAA2B,CAACH,KAAD,CAF/B,CAAP,CAAA;AAGD,GAAA;AAED;;;EACAI,MAAM,CAACJ,KAAD,EAAiC;IACrC,OAAO,IAAA,CAAKJ,QAAL,CACJK,UADI,EAAA,CAEJC,OAFI,CAEIG,8CAA2B,CAACL,KAAD,CAF/B,CAAP,CAAA;AAGD,GAAA;AAED;;;EACAM,SAAS,CAACN,KAAD,EAAgD;IACvD,OAAO,IAAA,CAAKJ,QAAL,CACJK,UADI,EAAA,CAEJC,OAFI,CAEIK,4EAA0C,CAACP,KAAD,CAF9C,CAAP,CAAA;AAGD,GAAA;AAED;;;EACAQ,aAAa,CAACR,KAAD,EAA4D;IACvE,OAAO,IAAA,CAAKJ,QAAL,CACJK,UADI,EAAA,CAEJC,OAFI,CAEIO,4DAAkC,CAACT,KAAD,CAFtC,CAAP,CAAA;AAGD,GAAA;AAED;;;EACAU,cAAc,CAACV,KAAD,EAA2C;IACvD,OAAO,IAAA,CAAKJ,QAAL,CACJK,UADI,EAAA,CAEJC,OAFI,CAEIS,kEAAqC,CAACX,KAAD,CAFzC,CAAP,CAAA;AAGD,GAAA;AAED;;;EACAY,WAAW,CAACZ,KAAD,EAAwC;IACjD,OAAO,IAAA,CAAKJ,QAAL,CACJK,UADI,EAAA,CAEJC,OAFI,CAEIW,4DAAkC,CAACb,KAAD,CAFtC,CAAP,CAAA;AAGD,GAAA;AAED;;;EACAc,IAAI,CAACd,KAAD,EAA+B;IACjC,OAAO,IAAA,CAAKJ,QAAL,CAAcK,UAAd,EAAA,CAA2BC,OAA3B,CAAmCa,0CAAyB,CAACf,KAAD,CAA5D,CAAP,CAAA;AACD,GAAA;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEgB,EAAAA,OAAO,CACLC,YADK,EAELjB,KAFK,EAGe;IACpB,OAAO,IAAA,CAAKQ,aAAL,CAAmB;AAAEU,MAAAA,OAAO,EAAEC,qBAAW,CAACF,YAAD,CAAtB;MAAsC,GAAGjB,KAAAA;AAAzC,KAAnB,CAAP,CAAA;AACD,GAAA;AAED;;;EACAoB,MAAM,CAACpB,KAAD,EAAiC;IACrC,OAAO,IAAA,CAAKJ,QAAL,CACJK,UADI,EAAA,CAEJC,OAFI,CAEImB,8CAA2B,CAACrB,KAAD,CAF/B,CAAP,CAAA;AAGD,GAAA;;AAjF8B;;;;"}