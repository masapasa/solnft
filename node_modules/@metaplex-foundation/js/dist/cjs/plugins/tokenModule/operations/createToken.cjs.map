{"version":3,"file":"createToken.cjs","sources":["../../../../../src/plugins/tokenModule/operations/createToken.ts"],"sourcesContent":["import { ExpectedSignerError } from '@/errors';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, TransactionBuilder } from '@/utils';\nimport {\n  ACCOUNT_SIZE,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  createAssociatedTokenAccountInstruction,\n  createInitializeAccountInstruction,\n} from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../pdas';\nimport { TokenProgram } from '../program';\nimport { Token } from '../models/Token';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenOperation' as const;\n\n/**\n * Creates a new token account.\n *\n * ```ts\n * const { token } = await metaplex.tokens().createToken({ mint }).run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createTokenOperation = useOperation<CreateTokenOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateTokenOperation = Operation<\n  typeof Key,\n  CreateTokenInput,\n  CreateTokenOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateTokenInput = {\n  /**\n   * The address of the mint account associated\n   * with the new token account.\n   */\n  mint: PublicKey;\n\n  /**\n   * The address of the owner of the new token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  owner?: PublicKey;\n\n  /**\n   * The token account as a Signer if we want to create\n   * a new token account with a specific address instead of\n   * creating a new associated token account.\n   *\n   * @defaultValue Defaults to creating a new associated token account\n   * using the `mint` and `owner` parameters.\n   */\n  token?: Signer;\n\n  /**\n   * The Signer paying for the new token account and\n   * for the transaction fee.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /** The address of the SPL Token program to override if necessary. */\n  tokenProgram?: PublicKey;\n\n  /** The address of the SPL Associated Token program to override if necessary. */\n  associatedTokenProgram?: PublicKey;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateTokenOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The newly created token account. */\n  token: Token;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createTokenOperationHandler: OperationHandler<CreateTokenOperation> =\n  {\n    async handle(\n      operation: CreateTokenOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<CreateTokenOutput> {\n      const builder = await createTokenBuilder(metaplex, operation.input);\n      scope.throwIfCanceled();\n\n      const output = await builder.sendAndConfirm(\n        metaplex,\n        operation.input.confirmOptions\n      );\n      scope.throwIfCanceled();\n\n      const token = await metaplex\n        .tokens()\n        .findTokenByAddress({ address: output.tokenAddress })\n        .run(scope);\n\n      return { ...output, token };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateTokenBuilderParams = Omit<\n  CreateTokenInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateTokenBuilderContext = {\n  /** The computed address of the token account to create. */\n  tokenAddress: PublicKey;\n};\n\n/**\n * Creates a new token account.\n *\n * ```ts\n * const transactionBuilder = await metaplex.tokens().builders().createToken({ mint });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createTokenBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenBuilderParams\n): Promise<TransactionBuilder<CreateTokenBuilderContext>> => {\n  const {\n    mint,\n    owner = metaplex.identity().publicKey,\n    token,\n    payer = metaplex.identity(),\n    tokenProgram = TokenProgram.publicKey,\n    associatedTokenProgram = ASSOCIATED_TOKEN_PROGRAM_ID,\n  } = params;\n\n  const isAssociatedToken = token === undefined;\n  const builder =\n    TransactionBuilder.make<CreateTokenBuilderContext>().setFeePayer(payer);\n\n  if (isAssociatedToken) {\n    const associatedTokenAddress = findAssociatedTokenAccountPda(\n      mint,\n      owner,\n      tokenProgram,\n      associatedTokenProgram\n    );\n\n    return (\n      builder\n        .setContext({ tokenAddress: associatedTokenAddress })\n\n        // Create an associated token account.\n        .add({\n          instruction: createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedTokenAddress,\n            owner,\n            mint,\n            tokenProgram,\n            associatedTokenProgram\n          ),\n          signers: [payer],\n          key:\n            params.createAssociatedTokenAccountInstructionKey ??\n            'createAssociatedTokenAccount',\n        })\n    );\n  }\n\n  return (\n    builder\n      .setFeePayer(payer)\n      .setContext({ tokenAddress: token.publicKey })\n\n      // Create an empty account for the Token.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount({\n            payer,\n            newAccount: token,\n            space: ACCOUNT_SIZE,\n            program: tokenProgram,\n            instructionKey:\n              params.createAccountInstructionKey ?? 'createAccount',\n          })\n      )\n\n      // Initialize the Token.\n      .add({\n        instruction: createInitializeAccountInstruction(\n          token.publicKey,\n          mint,\n          owner,\n          tokenProgram\n        ),\n        signers: [token],\n        key: params.initializeTokenInstructionKey ?? 'initializeToken',\n      })\n  );\n};\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateTokenIfMissingBuilderParams = Omit<\n  CreateTokenBuilderParams,\n  'token'\n> & {\n  /**\n   * The token account to create if it does not exist.\n   * Here, it may be passed as a PublicKey if and only\n   * if it already exists.\n   */\n  token?: PublicKey | Signer;\n\n  /**\n   * Whether or not the token account exists.\n   *\n   * @defaultValue `true`\n   */\n  tokenExists?: boolean;\n\n  /**\n   * The name of the token variable on the operation that uses\n   * this helper token builder.\n   *\n   * @defaultValue `\"token\"`\n   */\n  tokenVariable?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n * @internal\n */\nexport const createTokenIfMissingBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenIfMissingBuilderParams\n): Promise<TransactionBuilder<CreateTokenBuilderContext>> => {\n  const {\n    mint,\n    owner = metaplex.identity().publicKey,\n    token,\n    tokenExists = true,\n    payer = metaplex.identity(),\n    tokenVariable = 'token',\n  } = params;\n\n  const destination = token ?? findAssociatedTokenAccountPda(mint, owner);\n  const destinationAddress = toPublicKey(destination);\n  const builder = TransactionBuilder.make<CreateTokenBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ tokenAddress: destinationAddress });\n\n  if (tokenExists) {\n    return builder;\n  }\n\n  // When creating a token account, ensure it is passed as a Signer.\n  if (token && !isSigner(token)) {\n    throw new ExpectedSignerError(tokenVariable, 'PublicKey', {\n      problemSuffix:\n        `The provided \"${tokenVariable}\" account ` +\n        `at address [${destinationAddress}] does not exist. ` +\n        `Therefore, it needs to be created and passed as a Signer.`,\n      solution:\n        `If you want to create the \"${tokenVariable}\" account, then please pass it as a Signer. ` +\n        `Alternatively, you can pass the owner account as a PublicKey instead to ` +\n        `use (or create) an associated token account.`,\n    });\n  }\n\n  return builder.add(\n    await metaplex\n      .tokens()\n      .builders()\n      .createToken({\n        ...params,\n        mint,\n        owner,\n        token,\n        payer,\n      })\n  );\n};\n"],"names":["Key","createTokenOperation","useOperation","createTokenOperationHandler","handle","operation","metaplex","scope","builder","createTokenBuilder","input","throwIfCanceled","output","sendAndConfirm","confirmOptions","token","tokens","findTokenByAddress","address","tokenAddress","run","params","mint","owner","identity","publicKey","payer","tokenProgram","TokenProgram","associatedTokenProgram","ASSOCIATED_TOKEN_PROGRAM_ID","isAssociatedToken","undefined","TransactionBuilder","make","setFeePayer","associatedTokenAddress","findAssociatedTokenAccountPda","setContext","add","instruction","createAssociatedTokenAccountInstruction","signers","key","createAssociatedTokenAccountInstructionKey","system","builders","createAccount","newAccount","space","ACCOUNT_SIZE","program","instructionKey","createAccountInstructionKey","createInitializeAccountInstruction","initializeTokenInstructionKey","createTokenIfMissingBuilder","tokenExists","tokenVariable","destination","destinationAddress","toPublicKey","isSigner","ExpectedSignerError","problemSuffix","solution","createToken"],"mappings":"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"}