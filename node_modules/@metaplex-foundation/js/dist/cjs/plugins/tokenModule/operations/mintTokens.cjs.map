{"version":3,"file":"mintTokens.cjs","sources":["../../../../../src/plugins/tokenModule/operations/mintTokens.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { DisposableScope, TransactionBuilder } from '@/utils';\nimport { createMintToInstruction } from '@solana/spl-token';\nimport { ConfirmOptions, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { findAssociatedTokenAccountPda } from '../pdas';\nimport { TokenProgram } from '../program';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintTokensOperation' as const;\n\n/**\n * Mint tokens to an account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .mint({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   })\n *   .run();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const mintTokensOperation = useOperation<MintTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MintTokensOperation = Operation<\n  typeof Key,\n  MintTokensInput,\n  MintTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MintTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The amount of tokens to mint. */\n  amount: SplTokenAmount;\n\n  /**\n   * The owner of the token account to mint to.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  toOwner?: PublicKey;\n\n  /**\n   * The address of the token account to mint to.\n   *\n   * Note that this may be required as a `Signer` if the destination\n   * token account does not exist and we need to create it before\n   * minting the tokens.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `toOwner` parameters.\n   */\n  toToken?: PublicKey | Signer;\n\n  /**\n   * The authority that is allowed to mint new tokens as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  mintAuthority?: PublicKey | Signer;\n\n  /**\n   * The signing accounts to use if the mint authority is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n\n  /**\n   * The Signer paying for the new token account if it does not\n   * already exist. This is also used to pay for the transaction fee.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  payer?: Signer;\n\n  /** The address of the SPL Token program to override if necessary. */\n  tokenProgram?: PublicKey;\n\n  /** The address of the SPL Associated Token program to override if necessary. */\n  associatedTokenProgram?: PublicKey;\n\n  /** A set of options to configure how the transaction is sent and confirmed. */\n  confirmOptions?: ConfirmOptions;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MintTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const mintTokensOperationHandler: OperationHandler<MintTokensOperation> =\n  {\n    async handle(\n      operation: MintTokensOperation,\n      metaplex: Metaplex,\n      scope: DisposableScope\n    ): Promise<MintTokensOutput> {\n      const {\n        mintAddress,\n        toOwner = metaplex.identity().publicKey,\n        toToken,\n      } = operation.input;\n\n      const destination =\n        toToken ?? findAssociatedTokenAccountPda(mintAddress, toOwner);\n      const destinationAddress = toPublicKey(destination);\n      const destinationAccountExists = await metaplex\n        .rpc()\n        .accountExists(destinationAddress);\n      scope.throwIfCanceled();\n\n      const builder = await mintTokensBuilder(metaplex, {\n        ...operation.input,\n        toTokenExists: destinationAccountExists,\n      });\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, operation.input.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MintTokensBuilderParams = Omit<\n  MintTokensInput,\n  'confirmOptions'\n> & {\n  /**\n   * Whether or not the provided token account already exists.\n   * If `false`, we'll add another instruction to create it.\n   *\n   * @defaultValue `true`\n   */\n  toTokenExists?: boolean;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints tokens. */\n  mintTokensInstructionKey?: string;\n};\n\n/**\n * Mint tokens to an account.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .mint({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const mintTokensBuilder = async (\n  metaplex: Metaplex,\n  params: MintTokensBuilderParams\n): Promise<TransactionBuilder> => {\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    mintAuthority = metaplex.identity(),\n    multiSigners = [],\n    payer = metaplex.identity(),\n    tokenProgram = TokenProgram.publicKey,\n  } = params;\n\n  const [mintAuthorityPublicKey, signers] = isSigner(mintAuthority)\n    ? [mintAuthority.publicKey, [mintAuthority]]\n    : [mintAuthority, multiSigners];\n\n  const destination =\n    toToken ?? findAssociatedTokenAccountPda(mintAddress, toOwner);\n\n  return (\n    TransactionBuilder.make()\n\n      // Create token account if missing.\n      .add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createTokenIfMissing({\n            ...params,\n            mint: mintAddress,\n            owner: toOwner,\n            token: toToken,\n            tokenExists: toTokenExists,\n            payer,\n            tokenVariable: 'toToken',\n          })\n      )\n\n      // Mint tokens.\n      .add({\n        instruction: createMintToInstruction(\n          mintAddress,\n          toPublicKey(destination),\n          mintAuthorityPublicKey,\n          amount.basisPoints.toNumber(),\n          multiSigners,\n          tokenProgram\n        ),\n        signers,\n        key: params.mintTokensInstructionKey ?? 'mintTokens',\n      })\n  );\n};\n"],"names":["Key","mintTokensOperation","useOperation","mintTokensOperationHandler","handle","operation","metaplex","scope","mintAddress","toOwner","identity","publicKey","toToken","input","destination","findAssociatedTokenAccountPda","destinationAddress","toPublicKey","destinationAccountExists","rpc","accountExists","throwIfCanceled","builder","mintTokensBuilder","toTokenExists","sendAndConfirm","confirmOptions","params","amount","mintAuthority","multiSigners","payer","tokenProgram","TokenProgram","mintAuthorityPublicKey","signers","isSigner","TransactionBuilder","make","add","tokens","builders","createTokenIfMissing","mint","owner","token","tokenExists","tokenVariable","instruction","createMintToInstruction","basisPoints","toNumber","key","mintTokensInstructionKey"],"mappings":"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"}